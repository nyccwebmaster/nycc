<?php

function nycc_menu() {
  $items = array();
  
  $items['nycc-ride-coordinators-email'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_ride_coordinators_email'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'title' => 'Ride Coordinators Email'
  );

  $items['nycc-import-user-events'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_import_user_events'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'title' => 'Import User Events'
  );

  $items['nycc-update-group-user-status-js'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_update_group_user_status_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-approve-ride/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_approve_ride',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-update-ride-status-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_update_ride_status_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-update-ride-type-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_update_ride_type_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-join-ride'] = array(
    'page callback' => 'nycc_join_ride',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-withdraw-from-ride'] = array(
    'page callback' => 'nycc_withdraw_from_ride',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-existing-rides-js'] = array(
    'page callback' => 'nycc_existing_rides_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-participants-js'] = array(
    'page callback' => 'nycc_ride_participants_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-waiters-js'] = array(
    'page callback' => 'nycc_ride_waiters_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used for printpdf
  $items['nycc-riders-roster-pdf'] = array(
    'page callback' => 'nycc_output_riders_roster_pdf',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-review-membership'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_review_membership'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'title' => 'Review NYCC Profile Information'
  );

  $items['nycc-rides-report'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Ride Reports'
  );

  $items['nycc-rides-report/leaders'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Leaders'
  );

  $items['nycc-rides-report/riders'] = array(
    'page callback' => 'nycc_rides_report_riders',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Riders'
  );

  $items['user/%user_uid_optional/myrides'] = array(
    'page callback' => 'nycc_rides_report_rides',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_rides_access',
    'file' => 'nycc.reports.inc',
    'title' => 'Rides',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/mywaitlists'] = array(
    'page callback' => 'nycc_rides_report_waitlists',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc.reports.inc',
    'title' => 'Waitlists',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/myleads'] = array(
    'page callback' => 'nycc_rides_report_leads',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_leads_access',
    'file' => 'nycc.reports.inc',
    'title' => 'Leads',
    'page arguments' => array(1),
  );

  $items['nycc-update-contact-info'] = array(
    'page callback' => 'nycc_get_contact_info',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['approve-rides'] = array(
    'page callback' => 'nycc_approve_rides',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['node/%/cancel'] = array(
    'title' => 'Cancel Ride',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_ride_cancel_confirm', 1),
    'access callback' => 'nycc_access',
    'access arguments' => array('cancel', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/attend'] = array(
    'title' => 'Ride Attendance and Notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_ride_attend', 1),
    'access callback' => TRUE,
    //'access callback' => 'nycc_access',
    //'access arguments' => array('attend', 1),
    'type' => MENU_CALLBACK,
  );

  $items['nycc/group/notes/%/%'] = array(
    'title' => 'Group Ride Attendance and Notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_group_notes', 1),
    'access callback' => TRUE,
    //'access callback' => 'nycc_access',
    //'access arguments' => array('attend', 1),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/incentives'] = array(
    'title' => 'NYCC Ride Leader Incentives',
    'description' => 'NYCC ride leader incentive settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_ride_incentives'),
    'access callback' => TRUE,
    //'access arguments' => array('administer nycc_ride_leader_incentives'),
    //'access callback' => 'nycc_access',
    'type' => MENU_CALLBACK,
  );

  $items['reports/rides/incentives'] = array(
    'title' => 'NYCC Ride Leader Incentives Report',
    'description' => 'NYCC ride leader incentive report.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_ride_incentives_report'),
    'access callback' => TRUE,
    'access arguments' => array('view incentives report'),
    'type' => MENU_CALLBACK,
  );

  $items['test-ride-email'] = array(
    'page callback' => 'mss_test_ride_email',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['mss-diff-perms'] = array(
    'page callback' => 'mss_diff_perms',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['nycc/ipn'] = array(
      'title' => t('Paypal Payment IPN'),
      'description' => t('Paypal Payment IPN'),
      'type' => MENU_CALLBACK,
      'page callback' => 'nycc_ipn_callback',
      'access callback' => TRUE,
    );  
  

  return $items;
}

//This function is used to log members ride joins & withdrawals 
function nycc_log_action($node, $uid, $action_type)
{	
	$action_debug = false;
	
    if ($action_debug ) watchdog('nycc_log_action', 'Checking if is object', array(), WATCHDOG_NOTICE) ;
	if(is_object($node))
	{
	    if ($action_debug ) watchdog('nycc_log_action', 'Checking if is ride', array(), WATCHDOG_NOTICE) ;
		if($node->type == 'rides')
		{
			if ($action_debug ) watchdog('nycc_log_action', 'Checking action type', array(), WATCHDOG_NOTICE) ;
			switch($action_type) {
				case "Join A Ride":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Join A Ride', array(), WATCHDOG_NOTICE) ;

					if (($node->field_ride_spots[0]['value'] == 0) || ($node->field_ride_spots[0]['value'] ==""))
						$available_spots = 9999999;
					else
						$available_spots = $node->field_ride_spots[0]['value'] - nycc_count_riders($node);
						
					break;

				case "Join A Waitlist":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Join A Waitlist', array(), WATCHDOG_NOTICE) ;
					$available_spots = nycc_count_waiters($node) * -1;
					break;		

				case "Auto-Join From Waitlist":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Auto-Join From Waitlist', array(), WATCHDOG_NOTICE) ;
					$available_spots = 0;
					break;
			
				case "Withdraw From Ride":
					if ($action_debug ) watchdog('nycc_log_action', 'Action type is Withdraw From Ride', array(), WATCHDOG_NOTICE) ;

					if (($node->field_ride_spots[0]['value'] == 0) || ($node->field_ride_spots[0]['value'] ==""))
						$available_spots = 9999999;
					else
						$available_spots = $node->field_ride_spots[0]['value'] - nycc_count_riders($node);
					break;

				case "Withdraw From Waitlist":
					if ($action_debug ) watchdog('nycc', 'nycc_log_action - action type is Withdraw From Waitlist', array(), WATCHDOG_NOTICE) ;
					$available_spots = nycc_count_waiters($node) * -1;
					break;
			    default:
			    	watchdog('nycc_log_action', 'Unknown action type: ' . $action_type, array(), WATCHDOG_ERROR) ;
			    	break;
			    	
			} 
			watchdog("nycc_log_action", "Logging: " . $action_type . " " . $user_uid . " " .  $node->nid . " " . time() . " " . strtotime(nycc_get_ride_datetime($node)) . " " .  $available_spots , array(), WATCHDOG_NOTICE) ;
			
			if($action_type=="Withdraw From Ride" || $action_type=="Withdraw From Waitlist")
			{
		        $sql = "INSERT INTO {nycc_action_log} (`uid`, `node_id`, `action_time`, `action`, `event_type`, `event_start_time`, `avail_at_action_time`, `parent_aid`) VALUES (%d, %d, %d, '%s', '%s', %d, %d, (select a.aid from {nycc_action_log} a where a.uid=%d and a.node_id=%d and (a.action='%s' OR a.action='%s') ORDER by a.aid DESC LIMIT 1 ) )";
				$q = db_query($sql, $uid, $node->nid, time(), $action_type, "Ride", strtotime(nycc_get_ride_datetime($node)), $available_spots, $uid, $node->nid, "Join A Ride", "Join A Waitlist");
			
			} else {
		        $sql = "INSERT INTO {nycc_action_log} (`uid`, `node_id`, `action_time`, `action`, `event_type`, `event_start_time`, `avail_at_action_time`) VALUES (%d, %d, %d, '%s', '%s', %d, %d)";
				$q = db_query($sql, $uid, $node->nid, time(), $action_type, "Ride", strtotime(nycc_get_ride_datetime($node)), $available_spots);
			
			} 

		} else {
			watchdog('nycc_log_action', 'Unknown node type: ' . $node->type, array(), WATCHDOG_ERROR) ;
		}
	} else {
		watchdog('nycc_log_action', 'Node is not object', array(), WATCHDOG_ERROR) ;
	}
}

//This function implements a custom IPN processor used to connect PayPal payments to events
//View https://goo.gl/HWSVNk for documentaiton on how to use it 
function nycc_ipn_callback () {
	$ppl_debug = true;
	
  	if ($ppl_debug ) watchdog('nycc-ipn', 'Starting IPN callback', array(), WATCHDOG_NOTICE);

  	header("Content-type: text/html");
  	header("Expires: Wed, 29 Jan 1975 04:15:00 GMT");
  	header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
  	header("Cache-Control: no-cache, must-revalidate");
  	header("Pragma: no-cache");

  	// read the post from PayPal system and add 'cmd'
  	$req = 'cmd=_notify-validate';

  	foreach ($_POST as $key => $value) {
    	$value = urlencode(stripslashes($value));
    	$req .= "&$key=$value";
  	}

  	if ($ppl_debug ) watchdog('nycc', 'Posting back to validate', array(), WATCHDOG_NOTICE)  ;
  	// post back to PayPal system to validate
  	$header .= "POST /cgi-bin/webscr HTTP/1.0\r\n";
  	$header .= "Content-Type: application/x-www-form-urlencoded\r\n";
  	$header .= "Content-Length: " . strlen($req) . "\r\n\r\n";
  	$fp = fsockopen ('ssl://www.paypal.com', 443, $errno, $errstr, 30);

  	if (!$fp) {
  		if ($ppl_debug ) watchdog('nycc-ipn', 'Unable to verify IPN', array(), WATCHDOG_ERROR) ;

  	} else {
    	fputs ($fp, $header . $req);
    	if ($ppl_debug ) watchdog('nycc-ipn', 'received response from Paypal: ' . $header . $req, array(), WATCHDOG_NOTICE) ;
    	while (!feof($fp)) {
      		$res = fgets ($fp, 1024);

      		if (strcmp ($res, "VERIFIED") == 0) {
        		if ($ppl_debug ) watchdog('nycc-ipn', 'Paypal payment information received with transaction id @txn_id.', array('@txn_id' => $_POST['txn_id']), WATCHDOG_NOTICE) ;

        		//custom tag contains uid and event id. sample: uid=12245&nid=77765
	        	if  ((($_POST['payment_status'] == 'Completed') || ($_POST['payment_status'] == 'Refunded')) && (array_key_exists('custom', $_POST)))
    	    	{
	        		parse_str($_POST['custom'], $signup_info);
    		    	if( (is_numeric($signup_info['uid'])) && (is_numeric($signup_info['nid'])) )
        			{
        				$registeredUser =  user_load($signup_info['uid']);
        				$event = node_load($signup_info['nid']);
        				if( $registeredUser->uid != $signup_info['uid']) 
        				{
        					watchdog('nycc-ipn', 'Unable to load user: '  . $signup_info['uid'] , array(), WATCHDOG_ERROR) ;
        				} elseif($event->nid == $signup_info['nid']) {
       				
							if ($ppl_debug ) watchdog('nycc-ipn', 'Checking if user: ' . $signup_info['uid'] . ' is signed up for event: ' . $signup_info['nid'], array(), WATCHDOG_NOTICE) ;

							//retreive the Signup ID from signup_log to determine if the user is signed up. Note is also used to remove user on refund.
							$signedUpID = db_result(db_query("SELECT sid FROM {signup_log} WHERE uid = %d AND nid = %d", $signup_info['uid'], $signup_info['nid']));
							
							if( empty($signedUpID) && ($_POST['payment_status'] == 'Completed') ) //if user isn't registered for event and this is notificaiton of a purchase
							{ 
								if ($ppl_debug ) watchdog('nycc-ipn', 'Attempting to signup user: ' . $signup_info['uid'] . ' for event: ' . $signup_info['nid'], array(), WATCHDOG_NOTICE);

								if ($ppl_debug ) watchdog('nycc-ipn', 'Checking if event: ' . $signup_info['nid'] . " is open", array(), WATCHDOG_NOTICE);
								$signup_was_open =  $event->signup_status == 1; //check to see if event was open so that we can close it again after signing up the user, if necessary

								//If signups are not open then temporarily open
								if(! $signup_was_open) signup_open_signup($signup_info['nid']);
								
								//if signup is successfule then log message
								if (signup_sign_up_user($signup_info , TRUE, TRUE)) watchdog('nycc', 'User: ' . $signup_info['uid'] . ' sucessfully signed up for event: ' . $signup_info['nid'], array(), WATCHDOG_NOTICE) ;
								else watchdog('nycc-ipn', 'Unable to signup user: '  . $signup_info['uid'] . ' for event: ' . $signup_info['nid'], array(), WATCHDOG_ERROR) ;

								//If signups were not open then close
								if(! $signup_was_open) signup_close_signup($signup_info['nid']);
							
							} elseif ((!empty($signedUpID)) && ($_POST['payment_status'] == 'Refunded')) { //if user is registered for event AND this is notificaiton of a refund
								watchdog('nycc', 'Received Refund notice for User: ' . $signup_info['uid'] . ' for event: ' . $signup_info['nid'], array(), WATCHDOG_NOTICE) ;
								if(!empty($signedUpID))
								{
									signup_cancel_signup($signedUpID);
								  	watchdog('nycc-ipn', 'User: ' . $signup_info['uid'] . ' Cancelled signup for event: ' . $signup_info['nid'], array(), WATCHDOG_NOTICE) ;
							  	} 
							  	elseif ($ppl_debug ) watchdog('nycc', 'User is not signed up so nothing to cancel: ' . $signup_info['uid'] . ' for event: ' . $signup_info['nid'], array(), WATCHDOG_NOTICE);
							} 
							else watchdog('nycc-ipn', 'User: ' . $signup_info['uid'] . ' is already signed up for event: ' . $signup_info['nid'], array(), WATCHDOG_WARNING) ;     					
        				} 
        				else watchdog('nycc-ipn', 'Unable to load event: '  . $signup_info['nid'] , array(), WATCHDOG_ERROR) ;
        			} 
        			elseif ($ppl_debug ) watchdog('nycc', 'Unable to parse: ' . $_POST['custom'], array(), WATCHDOG_ERROR) ;
        		} 
        		else watchdog('nycc-ipn', 'Error processing IPN. Custom tag is: ' . $_POST['custom'] . ' Status tag is: ' . $_POST['payment_status'], array(), WATCHDOG_ERROR) ;
      		}
      		elseif (strcmp ($res, "INVALID") == 0) watchdog('nycc', 'Invalid IPN', array(), WATCHDOG_ERROR) ;
    	}
		fclose ($fp);
	}
  	die();
}

//This function overwrites the from: field on outgoing messages to be no-reply@nycc.org and sets the reply-to field to be the senders address.
//domains like aol.com are blocking messages send from an @aol.com address but not sent through their servers. see http://postmaster-blog.aol.com/2014/04/22/aol-mail-updates-dmarc-policy-to-reject/
function nycc_mail_alter(&$message){

  if (in_array($message['id'], array('contact_page_mail', 'contact_page_copy', 'contact_user_mail', 'contact_user_copy', 'signup_signup_broadcast_mail'))) {
  	global $user;
	$cp = content_profile_load('profile', $user->uid);
	if(is_object($cp)) {
	    $contact_name = $cp->field_first_name[0]['value'] . " " . $cp->field_last_name[0]['value'];
	}
    $contact_email = $message['from'];
    $site_name = variable_get('site_name', '');
    $site_mail = variable_get('site_mail', 'nobody@example.com');
    $message['subject'] .= ' ' . t('(Sent by @contact_name, @contact_email)', array('@contact_email' => $contact_email, '@contact_name' => $contact_name));

    $extra_info = t('You can simply reply to this message, or email @contact_name at @contact_email.', array( '@contact_name' => $contact_name, '@contact_email' => $contact_email));

    if (is_array($message['body'])) {
      $body =& $message['body'][0];
    }
    else {
      $body =& $message['body'];
    }
    $body .=  "\r\n\r\n" . $extra_info;
    $message['headers']['Reply-To'] = $message['from'];
    $message['from'] = $message['headers']['From'] = t("[@contact_name at @site_name] <@site_mail>", array('@contact_name' => $contact_name, '@contact_email' => $contact_email, '@site_name' => $site_name, '@site_mail' => $site_mail));
  } 
}

// function nycc_mail_alter(&$message){
//   if (in_array($message['id'], array('contact_page_mail', 'contact_page_copy', 'contact_user_mail', 'contact_user_copy', 'signup_signup_broadcast_mail'))) {
//     $contact_email = $message['from'];
//     $contact_name = $message['params']['name'];
//     $site_name = variable_get('site_name', '');
//     $site_mail = variable_get('site_mail', 'nobody@example.com');
//     $message['subject'] .= ' ' . t('(Sent by @contact_email)', array('@contact_email' => $contact_email));
// 
//     $extra_info = t('You can simply reply to this message, or email the sender at @contact_email.', array( '@contact_email' => $contact_email));
// 
//     if (is_array($message['body'])) {
//       $body =& $message['body'][0];
//     }
//     else {
//       $body =& $message['body'];
//     }
//     $body .=  "\r\n\r\n" . $extra_info;
//     $message['headers']['Reply-To'] = $message['from'];
//     $message['from'] = $message['headers']['From'] = t("[@site_name] <@site_mail>", array( '@site_name' => $site_name, '@site_mail' => $site_mail));
//   } 
// }

//This function accepts a timestamp (generally time()) and an hours interval and generates an email to the leaders of rides starting between those intervals
//NOTE: It has a hard coded action ID
function nycc_ride_roster_email($timestamp, $hrs) {
	$rr_debug = true;
	$actionID = 5;	// 5 is the tokenized email action for roster emails
	
  $sql =<<<EOS
SELECT N.nid AS nid, U.uid AS uid 
FROM node N  
INNER JOIN content_type_rides R ON N.nid = R.nid  AND N.vid = R.vid
Inner JOIN content_field_ride_leaders L ON N.vid = L.vid AND N.nid = L.nid
INNER JOIN node NL ON L.field_ride_leaders_nid = NL.nid 
INNER JOIN users U ON NL.uid = U.uid 
WHERE  R.field_ride_status_value = 'Approved' 
AND N.type = 'rides'
AND (R.field_ride_timestamp_value BETWEEN from_unixtime($timestamp) AND DATE_ADD(NOW(), INTERVAL $hrs HOUR)) 
; 
EOS;
	if ($rr_debug ) watchdog("nycc-ride_roster", "SQL is " .  $sql, array(), WATCHDOG_NOTICE);        
	$ride_count = 0;
	$q = db_query($sql);
  	while ($row = db_fetch_object($q)) {
    	$ride = node_load(array('nid' => $row->nid));
		$acct = user_load(array('uid' => $row->uid));
    	if ( ($ride) && ($acct) ) {
    		$ride_count++;
          	$cp = content_profile_load('profile', $acct->uid);
          	if ($cp) {
            	if ($cp->field_ride_rosters[0]['value'] != "false") {    		
        			$context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct);
        			actions_do($actionID, $acct, $context);     
    		if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " sent a roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");        
        		} else {
	        	if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " skipping roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");        
        		}
        	} else {// if cp
        		watchdog("nycc-ride_roster", "Could not load profile for user: " . $acct->uid, array(), WATCHDOG_WARNING) ;    
        	}
    	}  else  { //no ride or user
    		watchdog("nycc-ride_roster", "Could not load Ride: " . $row->nid . " or User: " . $row->nid, array(), WATCHDOG_WARNING) ;    
    	}
  	}  // while
  	if($ride_count > 0) {
	  	if ($rr_debug ) watchdog("nycc-ride_roster", $ride_count . " rides found starting within " . $hrs . " hours" , array(), WATCHDOG_NOTICE) ;
  	} else {
		if ($rr_debug ) watchdog("nycc-ride_roster", "No rides found starting within " . $hrs . " hours", array(), WATCHDOG_NOTICE);        
  	}
}

//This function is used by a custom token to generate a roster to be emailed
//NOTE: It contains hardcoded view name and display IDs
function nycc_output_riders_roster_html($nid = null) {
	$rr_debug = true;
 
 	$view_name = "ride_participants";
	$display_name = "block_4";
	
	if (is_object($nid)) {
		$ride = $nid;
    	$nid = $ride->nid;
	} elseif (is_numeric($nid) && ($nid > 0))  {
     	$ride = node_load(array('nid' => $nid));
 	}
    if ($ride) {      
      	$leaders = nycc_refs2ids(nycc_noderefs2userrefs($ride->field_ride_leaders));
      	$riders = nycc_refs2ids($ride->field_ride_current_riders);
      	$waiters = nycc_refs2ids($ride->field_ride_waitlist);
      	$roster = array(implode("+", array_filter(array_merge($leaders, $riders, $waiters))));
      	
//       	if ($rr_debug ) watchdog("nycc-ride_roster", "Roster for ride: " . $nid . " is: " . implode("+", array_filter(array_merge($leaders, $riders, $waiters))) , array(), WATCHDOG_NOTICE);        
 //      	dpm(array_filter(array_merge($leaders, $riders, $waiters)));
       	
  		$view = views_get_view($view_name);
  		if($view){
  		
			global $user;
			$original_user = $user;
			$old_state = session_save_session();
			session_save_session(FALSE);
			$user = user_load(array('uid' => 1));  		
	  	
	  		$view->hide_admin_links=TRUE;
  			
  			$output = $view->preview($display_name, $roster);
  			
			$user = $original_user;
			session_save_session($old_state);
  			return $output;
  		} else { //coulnd't love view
  			watchdog("nycc-ride_roster", "Could not load View: " . $view_name . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ; 
  		}

	} else { //no ride loaded
 		watchdog("nycc-ride_roster", "Could not load Ride: " . $nid . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ; 
 	}
 }

function nycc_rides_report_rides_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid) || in_array("administer", $user->roles) || in_array("board members", $user->roles) || user_access('administer users') || in_array("paid member", $user->roles) )
    return TRUE;
  return FALSE;
}

function nycc_rides_report_leads_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid) || in_array("administer", $user->roles) || in_array("board members", $user->roles) || in_array("paid member", $user->roles) || user_access('administer users'))
    return TRUE;
  return FALSE;
}

function nycc_perm() {
  return array('view incentives report');
}

function mss_test_ride_email() {
  $ride = node_load(array('nid' => arg(1)));
  $acct = user_load(array('mail' => arg(2)));
  //if ($acct)
  //  $cp = content_profile_load('profile', $acct->uid);
  if ($ride && $acct) {
    $context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct, 'profile'=> $cp);
    actions_do(2, $acct, $context);     // 2 is the email action for ride reminders
    watchdog("ride reminders", $acct->mail ." sent a reminder for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
    return "ride reminders: ". $acct->name ." at ". $acct->mail ." sent a reminder for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>";
  }
  return "ride node id and/or email address missing or invalid";
}

/* mss - 204-08-14 currently using as a general purpose test page */
function mss_diff_perms() {
  $s = "";
  $user_uid = 8456;
  $ride = node_load(array('nid' => 71790));
  $ridetime = $ridetime = strtotime(nycc_get_ride_datetime($ride));
  
  $timestamp = $ridetime;
  $acct = $user_uid;
  
  if (is_numeric($acct))
    $uid = $acct;
  if (is_null($acct))
    $uid = $user->uid;
  if (is_object($acct))
    $uid = $acct->uid;

  $sql =<<<EOS
SELECT * FROM content_field_ride_current_riders C, content_type_rides R WHERE C.nid = R.nid AND C.vid = R.vid AND R.field_ride_status_value = "Approved" AND C.field_ride_current_riders_uid = $uid AND
  UNIX_TIMESTAMP(CONCAT(
    DATE_FORMAT(R.field_date_ride_first_value, "%Y-%m-%d"),
    "T",
    If(R.field_ride_start_time_select_value = "AM", R.field_ride_start_time_hour_value, R.field_ride_start_time_hour_value+12),
    ":",
    R.field_ride_start_time_min_value,
    ":00"
  ))
  BETWEEN $timestamp - 60 * 60 * 4 AND $timestamp + 60 * 60 * 4 AND R.vid = (SELECT MAX(N.vid) FROM node_revisions N WHERE N.nid = R.nid);
EOS;


  //$sql = "SELECT * FROM content_field_ride_current_riders WHERE field_ride_current_riders_uid = 8456 ORDER BY nid";
 
  //$sql = "SELECT * FROM node_revisions WHERE nid = 71725 ORDER BY vid";
 

  
  $q = _db_query($sql); //, $uid, $timestamp, $timestamp);
  $arr = array();
  while ($r = db_fetch_object($q)) {
   $arr[] = $r;
  }
  
  
  $s .= "<p>Count: " . nycc_get_user_ride_counts($ridetime, $user_uid) . "</p>";
  
  /*
  $dev = mss_get_perms('dev');
  $test = mss_get_perms('test');
  $diff1 = array_diff_key($dev, $test);
  $diff2 = array_diff_key($test, $dev);
  dsm(array('dev' => $dev, 'test' => $test, 'diff dev test' => $diff1, 'diff test dev' => $diff2));
  return "showing differences in permission keys";
  */
  $s .=  "mss test page (mss_dif_perms) complete. ";

  dsm(get_defined_vars());
  
  return $s;
}

function mss_get_perms($db = 'dev') {
  //$origdb = db_set_active($db);
  $a = array();
  $sql = "SELECT name, perm FROM $db.permission p, $db.role r WHERE p.rid=r.rid";
  $q = db_query($sql);
  while ($r = db_fetch_object($q)) {
    $perm = explode(",", $r->perm);
    //$a[$r->name] = array();
    foreach ($perm as $p) {
      $a[$r->name .' '. trim($p)] = 1;
    }
  }
  //db_set_active($origdb);
  return $a;
}


function nycc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (($form_id == 'views_exposed_form') && ($form['#id'] == 'views-exposed-form-badge-awards-page-1')){
    $options = array('' => ' - Any - ');
    $sql = "SELECT name FROM {user_badges_badges} ORDER BY name";
    $q = db_query($sql);
    while ($r = db_fetch_object($q)) {
      $options[$r->name] = $r->name;
    }
    $form['nycc_badge_name_1']['#type'] = 'select';
    $form['nycc_badge_name_1']['#options'] = $options;
    $form['nycc_badge_name_1']['#default_value'] = '';
    //$form['nycc_badge_name_1']['#title'] = 'Badge';
    unset($form['nycc_badge_name_1']['#size']);
    //dpm(get_defined_vars());
  } // views_exposed_form
  
  if ($form_id == 'user_login_block') {
    //$form['#action'] = 'http://' . $_SERVER['SERVER_NAME'] . '/?q=user&' .drupal_get_destination();
    //$form['#action'] = url($_GET['q'], array('query' => drupal_get_destination(), 'absolute' => TRUE));
    $form['#action'] = '/?q=user&' .drupal_get_destination();
    $form['#method'] = 'post';
    $form['form_id'] = array(
      '#type' => 'hidden',
      '#default_value' => 'user_login'
    );
    $items = array();
    if (variable_get('user_register', 1)) {
       $items[] = l(t('create new account'), 'user/register', array('title' => t('Create a new user account.')));
    }
    $items[] = l(t('request new password'), 'user/password', array('title' => t('Request new password via e-mail.')));

    $form['name']['#title'] = "username or email";
    $form['pass']['#title'] = "password";

    $form['submit']['#value'] = "Login";

    $form['links'] = array('#value' => theme('item_list', $items));

    /*
    // http://drupal.org/comment/7865293#comment-7865293
    if (!securepages_is_secure()) {
      securepages_goto(FALSE);
    }
    */
  }

  if ($form_id == "volunteer_node_form") {

    if (in_array("administer", $user->roles) || in_array("ENY Director", $user->roles) ) {
      $form['help'] = array(
        '#weight' => -50,
        '#type' => 'markup',
        '#value' => "<a class='edit-link' href='/admin/content/node-type/volunteer' title='Edit these instructions...'>edit</a>",
      );
    }

    unset($form['buttons']['preview']);
    drupal_set_title("ENY Volunteer Sign-Up");

  }

  if ($form_id == "group_node_form") {
    //dsm(array($form, $form_state));
    $form["og_selective"]["#default_value"] = 1;
    //$form["og_selective"]["#access"] = FALSE;

    //$gf = taxonomy_form(1, $form['field_group_forum'][0]['value'], "", 'field_group_forum');
    //$gfp = taxonomy_form(1, $form['field_group_forum_private'][0]['value'], "", 'field_group_forum_private');

    //dsm(array( $form, $gf, $gfp, $form['field_group_forum'], $form['field_group_forum_private']));

    //$form['field_group_forum'] = taxonomy_form(1, $form['field_group_forum'][0]['value'], "", 'field_group_forum');
    //$form['field_group_forum_private'] = taxonomy_form(1, $form['field_group_forum_private'][0]['value'], "", 'field_group_forum_private');
    //$value = $form['field_group_forum'][0]['#default_value']['value'];
    //$form['field_group_forum']['#type'] = 'select';
    //$form['field_group_forum']['#options'] = $gf['#options'];
    //$form['field_group_forum'][0]['#value'] = $value;
    //$form['field_group_forum']['#default_value'][0]['value'] = $value;
    //$form['field_group_forum']['#value'] = $value;

    //dsm(array($value));

  }

  /* handle group forms*/
  if (in_array($form_id, array("forum_node_form", "event_node_form", "gpforumpost_node_form", "gpcaptspost_node_form", "rides_node_form", "blog_node_form")))  {

    // dsm($form['taxonomy'][1]['#options']);
    // dsm(taxonomy_get_tree(1,26));
    // dsm(forum_get_forums(26));
    // dsm(og_get_group_context());

    //dsm(array(&$form, &$form_state, $form_id));

    // todo: use og_get_group_context()

    $gids = $_REQUEST['gids'];  // create
    if (!$gids)
      $gids = $form['#node']->og_groups;  // edit

    // TODO: clean this up, not that $gp is used outside if below

    if ($gids && is_array($gids) && count($gids)) {

      if (count($gids) == 1) {
        $gid = array_shift($gids);
        $gp = node_load(array('nid' => $gid));
        //if ($gp) {
          //$gpforumid = $gp->field_group_forum[0]['value'];
          //if ($gpforumid > 0) {
            //$form['taxonomy'][1]['#default_value'] = $gpforumid;
            //$form['taxonomy'][1]['#disabled'] = true;
          //} else {
            // no forum or create
          //}
        //} else {
          // what if value is 0 or -1?
        //}
        if ($form_id == "forum_node_form") {
          //dsm(array(&$form, &$form_state, $form_id, $gp, $form['taxonomy']));
          $form['taxonomy'][1]['#default_value'] = $gp->field_group_forum[0]['value'];
          $form['taxonomy'][1]['#attributes'] = array('class' => 'hide');
          $form['taxonomy'][1]['#title'] = "";
          $form['taxonomy'][1]['#required'] = false;
        }
      } else {
        // what if multi id's from a power user post? can we multi select forums? probably not
        // show all matching forums in select
      }


      // hide audience too on post unless power user, at least colapse it - done in additional.js
      $form['body_field']['#teaser_include']['#type'] = 'hidden';    // why no worky?
      $form['body_field']['#teaser_include']['#value'] = true;    // why no worky?
      $form['shadow']['#type'] = 'hidden';
      $form['shadow']['#value'] = false;
      $form['path']['#collapsed'] = true;
      $form['og_nodeapi']['#collapsed'] = true;
      $form['flag']['#collapsed'] = true;
      $form['notifications']['#collapsed'] = true;
      // mss - 2013-02-20 - set status for to published for events and others
      $form['options']['status']['#default_value'] = true;

      unset($form['menu']);
      unset($form['journal']);
      //if (1 == 1) {   // todo: for non-power-users
        unset($form['flag']);
        //dsm($form['og_nodeapi']);
        //unset($form['body_field']['format']);   // why no worky?
      //}


    }
  }  /* group forms */


  if ($form_id == "profile_node_form") {
    // dsm($form);
    // dsm(implode(",", array_keys($form)));
    $form['account']['#weight'] = -20;
    $form['uc_roles']['#weight'] = -18;
    $form['field_ride_coordinator']['#weight'] = -14;

    $form['field_first_name']['#weight'] = -12;
    $form['field_last_name']['#weight'] = -12;

    $form['field_phone']['#weight'] = -10;

    $form['field_address']['#weight'] = -6;

    $form['field_city']['#weight'] = -4;
    $form['field_state']['#weight'] = -4;
    $form['field_zip']['#weight'] = -4;
    $form['field_country']['#weight'] = -4;

    $form['field_emergency_contact_no']['#weight'] = -3;
    $form['field_contact_name']['#weight'] = -3;

    $form['field_gender']['#weight'] = -2;
    $form['field_age_range']['#weight'] = -2;
    $form['field_riding_style']['#weight'] = -2;


    //$form['field_year_joined']['#weight'] = 1;
    $form['profile_joined_NYCC']['#weight'] = 1;
    $form['field_registration_date_import']['#weight'] = 1;
    $form['field_waiver_last_date']['#weight'] = 1;
    $form['field_review_last_date']['#weight'] = 1;

    $form['field_publish_email_flag']['#weight'] = 2;
    $form['field_publish_phone_flag']['#weight'] = 2;
    $form['field_publish_address_flag']['#weight'] = 2;

    $form['field_email_list_flag']['#weight'] = 3;
    $form['field_ride_reminders']['#weight'] = 3;
    $form['field_ride_rosters']['#weight'] = 3;

    $form['picture']['#weight'] = 4;

    $form['field_board_picture_1']['#weight'] =5;

    $form['field_board_title']['#weight'] = 6;
    $form['field_board_email_address']['#weight'] = 7;
    $form['field_board_order_value']['#weight'] = 8;
    $form['field_board_bio']['#weight'] = 9;

    $form['contact']['#weight'] = 15;
    $form['mimemail']['#weight'] = 16;
    $form['comment_notify_settings']['#weight'] = 17;
    $form['timezone']['#weight'] = 18;

    $form['legal']['#weight'] = 20;
    $form['field_terms_of_use']['#weight'] = 21;
    $form['field_terms_of_use']['#attributes'] = array('class', 'hide');

    $form['options']['#weight'] = 35;
    $form['author']['#weight'] = 35;
    $form['current_date']['#weight'] = 35;
    $form['language_value']['#weight'] = 35;
    $form['attachments']['#weight'] = 35;
    $form['menu']['#weight'] = 35;
    $form['file']['#weight'] = 35;
    $form['path']['#weight'] = 35;
    $form['theme_select']['#weight'] = 35;
    $form['block']['#weight'] = 35;
    $form['journal']['#weight'] = 50;
    //dsm($form);
  }

  if ($form_id == "rides_node_form") {

    if (arg(1) == 'add')
      $d = date("m/d/Y"); //date("m-d-Y");
    else {
      $t = $form['field_date_ride_first'][0]['#value']['value'];
      if (!drupal_strlen($t))
        $t = $form['field_date_ride_first'][0]['#default_value']['value'];
      //$d = nycc_get_date($t, "m-d-Y");
      $d = nycc_get_date($t, "m/d/Y");
    }

    $form['existing_rides_wrapper'] = array(
      '#type' => 'markup',
      '#value' => nycc_output_existing_rides(str_replace("-","/",$d)),
    );

    $form['nycc_rides_datepicker'] = array(
      '#type' => 'hidden',
      '#value' => $d,
    );

    $form['choose_calendar_target'] = array(
      '#type' => 'checkboxes',
      '#options' => array('yes' => t('Calendar clicks append recurring dates.')),
      '#attributes' => array('class' => 'nycc-append-dates-control'),
    );

    //dsm($form['field_ride_additional_dates']);
    $form['field_ride_additional_dates'][0]['#default_value']['value'] = $d;
    $form['field_ride_additional_dates']['#required'] = true;

    $status = nycc_get_ride_status($form['#node']);
    $action = !nycc_can_approve() && in_array($status, array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";
    $form['submit_instructions'] = array(
      '#prefix' => "<div id='nycc-submit-ride'>",
      '#value' => "Are you sure you want to $action this ride? Doing so will trigger emails to your ride coordinator, other ride leaders and any participants, in the case of re-submissions.",
    );
    $form['buttons']['submit']['#value'] = "Yes, $action this ride";
    $form['submit_cancel'] = array(
      '#suffix' => "</div>",
      '#value' => "<a href='#' onclick='$(\"#nycc-submit-ride\").hide(); return false;' title='No, hide this box again.'>No</a>",
    );

    if ($status == 'Approved') {

      $form['revision_information']['log']['#description'] = t("Ride Leaders: please provide an explanation of the additions or updates being made to help Ride Coordinators understand your changes.  Note that changing an approved ride will result in the ride being re-sumitted for approval and trigger email alerts to all riders. Revisions are optional for Ride Coordinators and Administers.");
      $form['revision_information']['#collapsible'] = 'fieldset';
      $form['revision_information']['#collapsible'] = false;
      $form['revision_information']['#collapsed'] = false;
      $form['revision_information']['#title'] = t("This is an approved ride!");
      $form['revision_information']['log']['#type'] = "textarea";
      $form['revision_information']['log']['#title'] = t("Revision summary");
      $form['revision_information']['log']['#attributes'] = array('placeholder' =>'e.g., start time change');
      $form['revision_information']['log']['#rows'] = 3;
      $form['revision_information']['revision']['#default_value'] = false;
      if (!nycc_can_approve()) {
        $form['revision_information']['revision']['#default_value'] = true;
        $form['revision_information']['log']['#required'] = true;
      }
    }
  }

  if ($form_id == "uc_cart_checkout_form") {
    $waiver = $form['panes']['uc_eco_main_legal'];
    $waiver['#attributes']['id'] = 'uc_eco_main_legal2';
    $wnode = node_load(array('nid'=>'51688'));
    if ($wnode) {
      $waiver['#title'] = $wnode->title;
      $waiver['terms_agree']['#label'] = $wnode->title;
      $waiver['terms_agree']['#title'] = $wnode->title;
      $waiver['terms_text']['#title'] = $wnode->title;
      $waiver['terms_text']['#value'] = trim($wnode->body);
      $waiver['terms_agree']['#options']['agreed'] = 'I agree to the '. $wnode->title;
    } else {
      $waiver['#title'] = 'Waiver Agreement';
      $waiver['terms_agree']['#label'] = 'Waiver';
      $waiver['terms_agree']['#title'] = 'Release and waiver of liability, assumption of risk, and indemnity agreement';
      $waiver['terms_text']['#title'] = 'Release and waiver of liability, assumption of risk, and indemnity agreement';
      $waiver['terms_text']['#value'] = 'Unable to load waiver agreement node. The website administrator has been notified of this.';
      $waiver['terms_agree']['#options']['agreed'] = 'I agree to the Release and waiver of liability, assumption of risk, and indemnity agreement';
      watchdog('nycc', 'Unable to load waiver agreement node/51688 in nycc_form_alter.');
    }
    array_splice($form['panes'], 5, 0, array('uc_eco_main_legal2' => $waiver) );
  }
}

function nycc_ride_status_select_ahah($node, $ride_status) {
  $form = nycc_ride_status_select_form($node, $ride_status);
  return "<form>". drupal_render(form_expand_ahah($form)). "</form>";
}

function nycc_ride_type_select_ahah($node, $ride_type) {
  $form = nycc_ride_type_select_form($node, $ride_type);
  return "<form>". drupal_render(form_expand_ahah($form)). "</form>";
}

function nycc_ride_status_select_form($node, $ride_status) {
  if (is_numeric($node))
    $nid = $node;
  else
    $nid = $node->nid;
  $ele = array(
    '#type' => 'select',
    '#id' => "ride-status-$nid",
    '#name' => 'ride-status',
    '#attributes' => array('class' => 'ride-status'),
    '#options' =>  nycc_ride_status_options(),
    '#value' => $ride_status,
    '#ahah' => array(
      'path' => "nycc-update-ride-status-js/$nid",
      'wrapper' => "ride-status-$nid-wrapper",
      'event' => 'change',
    ),
  );
  return $ele;
}

function nycc_ride_type_select_form($node, $ride_type) {
  if (is_numeric($node))
    $nid = $node;
  else
    $nid = $node->nid;
  $ele = array(
    '#type' => 'select',
    '#id' => "ride-type-$nid",
    '#name' => 'ride-type',
    '#attributes' => array('class' => 'ride-type'),
    '#options' =>  nycc_ride_type_options(),
    '#value' => $ride_type,
    '#ahah' => array(
      'path' => "nycc-update-ride-type-js/$nid",
      'wrapper' => "ride-type-$nid-wrapper",
      'event' => 'change',
    ),
  );
  return $ele;
}

function nycc_output_profile_buttons($account) {
  global $user;

  // logic controls access and button content
  // do we need $cp ?
  if (is_numeric($account))
    $uid = $account;
  else
    $uid = $account->uid;

  $output = "<div id='nycc-profile-buttons'>";
  if (arg(2))
    $output .= nycc_output_button("View Profile", "/user/$uid", "nycc-profile-view");
  if (arg(2) != 'edit' && ($user->uid == $account->uid || in_array("administer", $user->roles) || user_access('administer users')))
    $output .= nycc_output_button("Account Settings", "/user/$uid/edit", "nycc-profile-account");
  if (arg(2) != 'profile' && ($user->uid == $account->uid || in_array("administer", $user->roles) || user_access('administer users')))
    $output .= nycc_output_button("Profile Settings", "/user/$uid/profile/profile", "nycc-profile-settings", "", "");
  // todo: check for contact setting
  if (arg(2) != 'contact' && $user->contact)
    $output .= nycc_output_button("Contact Me", "/user/$uid/contact", "nycc-profile-contact");
  if (arg(2) != 'myrides')
    $output .= nycc_output_button("My Rides", "/user/$uid/myrides", "nycc-profile-rides");
  if (arg(2) != 'myleads')
    $output .= nycc_output_button("My Leads", "/user/$uid/myleads", "nycc-profile-leads");
  $output .= '</div>';
  return $output;
}

function nycc_output_ride_buttons($nid) {
  global $user;
  $user_uid = $user->uid;
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  } else
    $ride = node_load(array('nid' => $nid), null, true);

  // TODO: test for valid ride node

  // ride time as binary
  $ridetime = strtotime(nycc_get_ride_datetime($ride));

  $no_of_riders = nycc_count_riders($ride);
  $no_of_spots = $ride->field_ride_spots[0]['value'];
  if ($no_of_spots)
    $available_spots = $no_of_spots - $no_of_riders;
  $title = $ride->title;
  $path = "node/$nid";
  $output = "<div id='nycc-ride-buttons'>";

  if (!arg(2) && nycc_can_approve() && ($ride->field_ride_status[0]['value'] != "Approved")) {
    $output .= nycc_output_button("Approve This Ride", "/nycc-approve-ride/$nid", "nycc-ride-approve-ride", "", "");
  }

  if (!arg(2) && nycc_can_modify_ride($ride)) {
    $output .= nycc_output_button("Revise Ride Details", "/node/$nid/edit", "nycc-ride-revise", "", "");
  }

  //dsm(get_defined_vars());
  //dsm(array("nycc_is_waiting" => nycc_is_waiting($ride), "field_ride_waitlist" => $ride->field_ride_waitlist));
  if ($ride->field_ride_signups[0]['value'] != "No signups or waiting list") {
    if (nycc_is_rider($ride) && !arg(2) && nycc_ride_is_upcoming($ride)) {
      // TODO: check that signups are allowed
      $output .= nycc_output_button("Withdraw From Ride", "#", "nycc-withdraw-from-ride-button", '$("input#nycc-withdraw-from-ride").click(); return false;',"");
    }
    else if (nycc_is_waiting($ride) && !arg(2) && nycc_ride_is_upcoming($ride)) {
      // TODO: check that signups are allowed?
      $output .= nycc_output_button("Withdraw From Waiting List", "#", "nycc-withdraw-from-wait-button", '$("input#nycc-withdraw-from-ride").click(); return false;',"");
    }
    else if (!nycc_is_leader($ride) && !arg(2) && ($ride->field_ride_status[0]['value'] == 'Approved') && nycc_ride_is_upcoming($ride)) {
      if (!$no_of_spots || ($available_spots > 0)) {
        //$state = nycc_get_user_ride_counts(strtotime(nycc_get_ride_datetime($ride)), $user_uid) ? "nycc-disabled-button" : "";

        // TODO: check for signups before showing ride button

        // removed condition: ($ride->field_ride_type[0]['value'] == "Cue Sheet Ride") &&
        if (nycc_get_user_ride_counts($ridetime, $user_uid))
          $output .= nycc_output_button("<s>Join Ride</s>", "javascript:alert('Join Ride is disabled. Members may sign up for only one Ride in a four hour period.')", "nycc-disabled-button", "", "");
        else {
          $now = time();
          // disable rides until 10 days prior to event - Part I
        //if (($ridetime - $now) > 10 * 60 * 60 * 24) {
          if (($ride->field_ride_type[0]['value'] != "Club Event") && (($ridetime - $now) > 10 * 60 * 60 * 24) ){
            // do not display message here, do it in nodeapi
            //drupal_set_message("Ride signups are enabled 10 days before the event.");
            $output .= nycc_output_button("<s>Join Ride</s>", "javascript:alert('Join Ride is disabled until 10 days before the event.')", "nycc-disabled-button", "", "");
          } else {
            $output .= nycc_output_button("Join Ride", "#", "nycc-join-withdraw-from-ride-button", '$("input#nycc-join-ride").click(); return false;', "");
          }
        }
      }
      else if ($no_of_spots && !$available_spots && nycc_ride_allows_waitlist($ride) && nycc_ride_is_upcoming($ride)) {
        if (nycc_ride_overlaps_user($user_uid, $ridetime) > 0) {
          $output .= nycc_output_button("<s>Add Me To The Waiting List</s>", "javascript:alert('Add Me To The Waiting List is disabled because you are already on two waiting lists for rides within 4 hours of this ride.')", "nycc-disabled-button", "", "");
        } else {
          $output .= nycc_output_button("Add Me To The Waiting List", "#", "nycc-wait-add-ride-button", '$("input#nycc-join-ride").click(); return false;', "");
        }
      }
    }
  }

  if (!arg(2)) {
    $output .= nycc_output_button("Re-list This Ride", "/node/add/rides/relist/$nid", "nycc-ride-relist", "", "");
  }

  if (arg(2) == "edit") {
    $output .= nycc_output_button("View Ride Details", "/$path", "nycc-ride-view", "", "");
    $action = !nycc_can_approve() && in_array($ride->field_ride_status[0]['value'], array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";

    //if (nycc_can_approve())
    //  $output .= nycc_output_button("$action This Ride", "#", "nycc-ride-save", 'nycc_show_ride_submit_click(); return false;', "");
    //else
      $output .= nycc_output_button("$action This Ride", "#submit-top", "nycc-ride-save", 'nycc_show_ride_submit_confirm();', "");
    $output .= nycc_output_button("Cancel This Ride", "/node/$nid/cancel?destination=node/$nid", "nycc-ride-cancel", '', "");
  }

  if ($ride->field_ride_signups[0]['value'] != "No signups or waiting list") {
    if (!arg(2) && nycc_can_modify_ride($ride)) {
      $output .= nycc_output_button("Roster &amp; Waiver Form", "/printpdf/nycc-riders-roster-pdf/$nid", "nycc-ride-print-roster", "", "");
    }

    if (nycc_count_riders($ride) && nycc_can_modify_ride($ride)) {
      $output .= nycc_output_button("Email Participants", "mailto:". nycc_get_all_rider_emails($ride) ."?subject=$title", "nycc-ride-email-riders", "", "");
    }

    if (nycc_count_waiters($ride) && nycc_can_modify_ride($ride)) {
      $output .= nycc_output_button("Email Waiting List", "mailto:". nycc_get_all_waitlist_emails($ride) ."?subject=$title", "nycc-ride-email-waitlist", "", "");
    }

    if (nycc_count_riders($ride) && nycc_can_modify_ride($ride)) {
      $output .= nycc_output_button("Ride Attendance", "/node/$nid/attend", "nycc-ride-attendance", "", "");
    }
  }

  if (!(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'rides'))
    $output .= nycc_output_button("Email Leaders", "mailto:". nycc_get_all_leader_emails($ride) ."?subject=$title", "nycc-ride-email-leaders", "", "");

  $output .= '</div>';
  return $output;
}

// TODO: assumes valid ride object, allow nid
function nycc_ride_is_upcoming($ride) {
  //return true;
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!is_object($ride))
    return false;
  $rt = nycc_get_ride_time($ride);
  if ($rt >= time())
    return true;
  return false;
}

function nycc_get_ride_time($ride) {
  return strtotime(nycc_get_ride_time_as_text($ride));
}

function nycc_get_ride_time_as_text($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!is_object($ride))
    return null;
  $rdate = substr($ride->field_date_ride_first[0]['value'], 0, 10);
  $rhour = $ride->field_ride_start_time_hour[0]['value'];
  $rmin = $ride->field_ride_start_time_min[0]['value'];
  $rampm = $ride->field_ride_start_time_select[0]['value'];

  if (($rampm == "PM") && ($rhour < 12)) {
    $rhour = intval($rhour) + 12;
  }

  /*
  global $user;
  if ($user->uid == 1)
    drupal_set_message("nycc_ride_time: $rdate $rhour:$rmin:00");
  */
  //dsm(array('strtotime' => strtotime("$rdate $rhour:$rmin:00")));
  return "$rdate $rhour:$rmin:00";
}


function nycc_get_ride_location($ride) {
  if (!$ride || $ride->type != 'rides')
    return "";
 if($ride->field_ride_from[0]['value']==NULL) {
	return $ride->field_ride_from_select[0]['value'];
  } else {
	return $ride->field_ride_from[0]['value'];
  }
}


function nycc_withdraw_from_ride() {
  $nid = $_POST["nid"];
  global $user;
  $user_uid = $user->uid;
  $ride = node_load(array('nid' => $nid));
  if ($ride) {
    $current_riders = $ride->field_ride_current_riders;
    foreach($current_riders as $ndx => $val) {
      foreach($val as $current_rider_uid) {
        if ($current_rider_uid == $user_uid) {
          unset($ride->field_ride_current_riders[$ndx]);
          drupal_set_message("You have withdrawn from this ride.");
          watchdog("rides", "user: %uid (%uname) withdrew from ride: %nid (%rname)", array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);

          // NOTE: moved to nodeapi?
          // check for waitlisters and add first to riders and remove from waitlist
          // if (count($ride->field_ride_waitlist)) {
          //   // $current_waiters = $ride->field_ride_waitlist;
          //   // foreach($current_waiters as $ndx => $val) {
          //   //   if ($ndx) {
          //   //     $ride->field_ride_waitlist[$ndx-1]['uid'] = $ride->field_ride_waitlist[$ndx]['uid'];
          //   //   } else {
          //   //     $waiter = $ride->field_ride_waitlist[$ndx]
          //   //     $ride->field_ride_current_riders[] = $waiter;
          //   //   }
          //   //   $ride->field_ride_waitlist[$ndx]['uid'] = NULL;
          //   // }
          //   $waiter = array_shift($ride->field_ride_waitlist);
          //   //$waiter = array('uid' = > $ride->field_ride_waitlist[0]['uid']);
          //   if (!is_array($ride->field_ride_waitlist)) {
          //     $ride->field_ride_waitlist[] = array("uid" => NULL);
          //   }
          //   drupal_set_message("One person on waitlist moved to participant list.");
          //   $waiternode = user_load($waiter); // only for watchdog
          //   watchdog("rides", "user: %uid (%uname) auto joined from ride waitlist: %nid (%rname)", array('%uid'=> $waiter['uid'], '%uname' => $waiternode->name, '%nid'=> $ride->nid, '%rname' => $ride->title));
          //
          // }
          $ride->field_ride_additional_dates[0]['value'] = "";

          //adding event logging
          nycc_log_action($ride, $user_uid, "Withdraw From Ride");          
                    
          node_save($ride);
          drupal_goto("node/$nid");
        }
      }
    }
    // DONE: not a rider so now do similar for waitlist
    $current_waiters = $ride->field_ride_waitlist;
    foreach($current_waiters as $ndx => $val) {
      foreach($val as $current_waiter_uid) {
        if ($current_waiter_uid == $user_uid) {
          unset($ride->field_ride_waitlist[$ndx]);
          if (!is_array($ride->field_ride_waitlist)) {
            $ride->field_ride_waitlist[] = array("uid" => NULL);
          }
          $ride->field_ride_additional_dates[0]['value'] = "";
          node_save($ride);


           //adding event logging
           nycc_log_action($ride, $user_uid, "Withdraw From Waitlist");     
                     
          drupal_set_message("You have withdrawn from this ride's waiting list.");
          watchdog("rides", "user: %uid (%uname) withdrew from ride waitlist: %nid (%rname)", array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);
          drupal_goto("node/$nid");
        }
      }
    }
  }
  drupal_goto("node/$nid");
  //print nycc_output_ride_buttons($nid);
}

function nycc_ride_allows_waitlist($ride) {
  // TODO: how can we look up the default value for this cck field?
  // NOTE: older rides with no signup set default to true.
  return !$ride->field_ride_signups[0]['value'] || ($ride->field_ride_signups[0]['value'] == "Signups with waiting list");
}

function nycc_join_ride() {
  global $user;
  $user_uid = $user->uid;
  $nid = $_POST["nid"];

  //Checking User Access
  $user_access = in_array("paid member", $user->roles);
  if ($user_access == 1) {
    $joined_flag = 0;
    $ride = node_load(array('nid' => $nid));

    // no longer needed. message already shown on nodeapi view for this type
    // // check if user has already joined a ride on this date
    // if (nycc_get_user_ride_counts($ride->field_date_ride_first[0]['value'], $user_uid)) {
    //   drupal_set_message("You have already joined another ride on this date.");
    //   //drupal_goto("node/$nid");
    // }

    $current_riders = $ride->field_ride_current_riders;
    
    if (is_array($current_riders)) {
		//Checking ride, if it is already joined.
		foreach($current_riders as $val){
		  foreach($val as $current_rider_uid){
			if ($current_rider_uid == $user_uid) {
			 $joined_flag = 1;
			}
		  }
		}
	
		//Checking available spots.
		foreach($current_riders as $val){
		  foreach($val as $current_rider_uid){
			if (is_numeric($current_rider_uid)) {
			  $no_of_riders = $no_of_riders + 1;
			}
		  }
		}
    }
    $no_of_spots = $ride->field_ride_spots[0]['value'];
    $available_spots = $no_of_spots - $no_of_riders;
    if (!$no_of_spots || ($available_spots > 0)) {
      if ($joined_flag == 0) {

        // return null for redirect to profile
        // TODO: CHECK THAT RENEWAL DATE IS BEYOND RIDE DATE
        if (!nycc_has_required_profile_info()) {
          drupal_set_message("Please update your Emergency Contact No and Name (required for ride signup).");
          drupal_goto("user/$user_uid/profile/profile/", "destination=node/$nid");
        }

        //joining a ride for logged in user
        if ($ride->field_ride_current_riders[0]['uid'] == NULL) {
          $ride->field_ride_current_riders[0]['uid'] = $user_uid;
        }
        else {
          $ride->field_ride_current_riders[]['uid'] = $user_uid;
        }
        $ride->field_ride_additional_dates[0]['value'] = "";
        node_save($ride);
        
        //adding event logging
        nycc_log_action($ride, $user_uid, "Join A Ride");        
        
        // save waiver release acknowledgement date
        $cp = content_profile_load('profile', $user->uid);
        if ($cp) {
          $cp->field_waiver_last_date[0]['value'] = date('Y-m-d');
          node_save($cp);
        }
        drupal_set_message("You have joined this ride.");
        watchdog("rides", "user: %uid (%uname) joined ride: %nid (%rname)", array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);
      } else
        drupal_set_message("You have already joined this ride.");
    } else {
      if (nycc_ride_allows_waitlist($ride)) {
      // similar to join, but for waitlist
      // return null for redirect to profile
      // TODO: CHECK THAT RENEWAL DATE IS BEYOND RIDE DATE
        if (!nycc_has_required_profile_info()) {
          drupal_set_message("Please update your Emergency Contact No and Name (required for ride signup).");
          drupal_goto("user/$user_uid/profile/profile/", "destination=node/$nid");
        }

        // check for user already on waiting list
        if (is_array($ride->field_ride_waitlist)) {
          foreach($ride->field_ride_waitlist as $waiter){
            if ($waiter['uid'] == $user_uid) {
              drupal_set_message("You are already on the waitlist");
              drupal_goto("node/$nid");
            }
          }
        }
        
        // adding waitlist a ride for logged in user
        if ($ride->field_ride_waitlist[0]['uid'] == NULL) {     // empty node or user ref list
          $ride->field_ride_waitlist[0]['uid'] = $user_uid;
        }
        else {
          $ride->field_ride_waitlist[]['uid'] = $user_uid;
        }

        // TODO: why is this here?
        $ride->field_ride_additional_dates[0]['value'] = "";

        node_save($ride);
        
		nycc_log_action($ride, $user_uid, "Join A Waitlist");

        // save waiver release acknowledgement date
        $cp = content_profile_load('profile', $user->uid);
        if ($cp) {
          $cp->field_waiver_last_date[0]['value'] = date('Y-m-d');
          node_save($cp);
        }
        drupal_set_message("You have been added to this waiting list for this ride.");
        watchdog("rides", "user: %uid (%uname) added to ride waitlist: %nid (%rname)", array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title), WATCHDOG_INFO);

      } else
        drupal_set_message("There are no more available spots.");
    }
  } else {
    drupal_set_message("You must be a paid member to join a ride.");
  //print nycc_output_ride_buttons($nid);
  }
  drupal_goto("node/$nid");
}

function nycc_update_ride_status($ride, $ride_status) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));

  if ($ride && in_array($ride_status, nycc_ride_status_options())) {
    $ride->field_ride_status[0]['value'] = $ride_status;
    $ride->field_ride_additional_dates[0]['value'] = "";
    node_save($ride);
  } else {
    drupal_set_message('update failed: invalid node or ride status');
  }
}


function nycc_update_group_user_status_js() {
  $id = $_POST["id"];
  $tid = $_POST["tid"];
  list($temp, $gid, $uid) = explode("-", $id);
  // validate, use token ?
  $sql = "REPLACE INTO {nycc_group_user_status} (gid, uid, tid) VALUES (%d, %d, %d)";
  $q = db_query($sql, $gid, $uid, $tid);
  $output_html = "received id: $id, tid: $tid, gid: $gid, uid: $uid";
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}


function nycc_update_ride_status_js() {
  $nid = arg(1);
  $ride_status = $_POST["ride-status"];
  $node = node_load(array('nid' => $nid));
  if ($node) {
    if (in_array($ride_status, nycc_ride_status_options())) {
      $node->field_ride_status[0]['value'] = $ride_status;
      $node->field_ride_additional_dates[0]['value'] = "";
      node_save($node);
      $output_html = nycc_ride_status_select_ahah($node, $ride_status);
    } else
      $output_html = "invalid ride status: $ride_status";
  } else
    $output_html = "invalid ride node id: $nid";
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}

function nycc_update_ride_type_js() {
  $nid = arg(1);
  $ride_type = $_POST["ride-type"];
  $node = node_load(array('nid' => $nid));
  if ($node) {
    if (in_array($ride_type, nycc_ride_type_options())) {
      $node->field_ride_type[0]['value'] = $ride_type;
      node_save($node);
      $output_html = nycc_ride_type_select_ahah($node, $ride_type);
    } else
      $output_html = "invalid ride type: $ride_type";
  } else
    $output_html = "invalid ride node id: $nid";
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}

function nycc_ride_status_options() {
  return array("Approved"=>"Approved", "Cancelled"=>"Cancelled", "Pending"=>"Pending", "Flagged" => "Flagged", "Revised" => "Revised", "Submitted"=>"Submitted");
}
function nycc_get_ride_types(){}

function nycc_ride_type_options() {
	if(nycc_can_approve()) {
	   return array( "" => "",
				"Cue Sheet Ride" => "Cue Sheet Ride",
				"Training Ride" => "Training Ride",
				"Club Event" => "Club Event" );
	} else {
	   return array( "" => "",
	   			"Cue Sheet Ride" => "Cue Sheet Ride",
	 			"Training Ride" => "Training Ride");
	}
  //return array("" => "", "Cue Sheet Ride"=>"Cue Sheet Ride", "Training Ride"=>"Training Ride");
}

function nycc_ride_level_options() {
  return array("A"=>"A-ride", "B"=>"B-ride", "C"=>"C-ride");
}

// function nycc_relist_ride($onode, $ride_status = "Submitted") {
//   global $user;
//   $node = clone $onode;
//   $title = $node->title;
//   //$ride_date_db = nycc_get_date($date);
//
//   $node->nid = NULL;
//   $node->vid = NULL;
//   $node->field_ride_status[0]['value'] = $ride_status;
//
//   $node->tnid = NULL;
//   $node->created = NULL;
//   $node->book['mlid'] = NULL;
//   $node->path = NULL;
//   $node->files = array();
//
//   $node->field_date_ride_first[0]['value'] = "";  // $ride_date_db;
//   $node->field_ride_additional_dates = NULL;
//   $node->field_ride_current_riders = array();
//   $node->field_ride_leaders = array(array('uid' => $user->uid));
//   $node->field_ride_waitlist = array();
//
//   node_save($node);
//
//   $nid = $node->nid;
//   drupal_set_message("Please enter a new date before saving.");
//   drupal_goto("node/". $nid . "/edit");
// }

function nycc_clone_ride($onode, $date, $ride_status = "Submitted") {
  if (!drupal_strlen(trim($date)))
    return false;
  $node = clone $onode;
  $title = $node->title;
  $ride_date_db = nycc_get_date($date);
  if (nycc_ride_exists($title, $ride_date_db)) {
    //drupal_set_message("Ride with title $title already exists for $date");
    return false;
  }
  $node->nid = NULL;
  $node->vid = NULL;
  $node->field_ride_status[0]['value'] = $ride_status;

  $node->tnid = NULL;
  $node->created = NULL;
  $node->book['mlid'] = NULL;
  $node->path = NULL;
  $node->files = array();

  $node->field_date_ride_first[0]['value'] = $ride_date_db;
  $node->field_ride_additional_dates[0]['value'] = "";
  $node->field_ride_current_riders = array();
  $node->field_ride_waitlist = array();
  node_save($node);
  $nid = $node->nid;
  // note: messaging will not work as expected if called via ajax
  drupal_set_message("Recurring ride for <a href='/node/$nid' title='View recurring ride in another tab or window...' target='_blank'>$title</a> created with date $date");
  return true;
}

// print for ajax return
function nycc_ride_participants_js($nid = null) {
  print nycc_output_ride_participants($nid);
}

function nycc_output_ride_participants($nid = null) {
  //global $theme_path;
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  }
  else if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    if (!$ride)
      $ride = node_load(array('nid' => $nid));
    if ($ride) {
      if ($ride->field_ride_signups[0]['value'] == "No signups or waiting list")
        return "";
      $current_riders = $ride->field_ride_current_riders;
      $cnt = 0;
      if (is_array($current_riders) && count($current_riders)) {
        $output = "<ul class='nycc-ride-particpants-list'>";
        foreach ($current_riders as $val){
          if (is_array($val)) {
            foreach ($val as $current_rider_uid){
              if (is_numeric($current_rider_uid)) {
                $cnt++;
                $cp = content_profile_load('profile', $current_rider_uid);
                $output .= "<li><a href='/user/$current_rider_uid' target='_blank'>". $cp->field_first_name[0]['value'] ." ". $cp->field_last_name[0]['value'] ."</a></li>";
              }
            }
          }
        }
        $output .= "</ul>";
      }
      if (!$cnt)
        $output = "<ul class='nycc-empty-ride-particpants-list'><li>Be the first to join!</li></ul>";
    }
  }
  return $output;
}

// print for ajax return
function nycc_ride_waitlist_js($nid = null) {
  print nycc_output_ride_waitlist($nid);
}

function nycc_output_ride_waitlist($nid = null) {
  //global $theme_path;
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  }
  else if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    if (!$ride)
      $ride = node_load(array('nid' => $nid));
    if ($ride) {
      if ($ride->field_ride_signups[0]['value'] == "No signups or waiting list")
        return "";
      $current_waiters = $ride->field_ride_waitlist;
      $cnt = 0;
      if (is_array($current_waiters) && count($current_waiters)) {
        $output = "<ul class='nycc-ride-waitlist'>";
        foreach ($current_waiters as $val){
          if (is_array($val)) {
            foreach ($val as $current_waiter_uid){
              if (is_numeric($current_waiter_uid)) {
                $cnt++;
                $cp = content_profile_load('profile', $current_waiter_uid);
                $output .= "<li>". $cp->field_first_name[0]['value'] ." ". $cp->field_last_name[0]['value'] ."</li>";
              }
            }
          }
        }
        $output .= "</ul>";
      }
      if (!$cnt)
        $output = "<ul class='nycc-empty-ride-waitlist'><li></li></ul>";
    }
  }
  return $output;
}

function nycc_output_group_ride_withdrawals_block($nid = null) {
  //global $theme_path;
  $output = "";
  if (is_object($nid)) {
    $ride = $nid;
    $nid = $ride->nid;
  }
  else if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    if (!$ride)
      $ride = node_load(array('nid' => $nid));
    if ($ride) {
      if ($ride->field_ride_signups[0]['value'] == "No signups or waiting list")
        return $output;

      $gp = og_determine_context();
      $sql = og_list_users_sql();
      $result = db_query($sql, $gp->nid);
      $cnt = 0;
      $current_riders = $ride->field_ride_current_riders;
      //dpm($current_riders);
      if (!is_array($current_riders) || !count($current_riders))
        return $output;
      $output = "<ul class='nycc-ride-withdrawals'>";
      while ($row = db_fetch_object($result)) {
        //dpm($row);
        $acct = user_load($row->uid);// check that user is active group member and not a captain/admin
        if ($acct && is_array($acct->og_groups[$gp->nid]) && $acct->og_groups[$gp->nid]['is_active']) {
          // check that user is not already in list if this gets moved to an edit/approval position
          if ($acct->og_groups[$gp->nid]['is_admin']) {
            // do nothing
          } else {
            // check if on ride list
            $found = FALSE;
            foreach ($current_riders as $val){
              //dpm(array($row, $val));
              if (is_array($val)) {
                foreach ($val as $current_rider_uid){
                  if (is_numeric($current_rider_uid) && ($current_rider_uid == $row->uid)) {
                    $found = TRUE;
                    //dpm(array($current_rider_uid, $row->uid));
                  } // if (is_numeric($current_rider_uid) && ($current_rider_uid == $row->uid))
                } // foreach ($val as $current_rider_uid)
              } // if (is_array($val))
              // TODO: break if found
            } // foreach ($current_riders as $val)
            if (!$found) {
              $cnt++;
              $cp = content_profile_load('profile', $row->uid);
              $output .= "<li>". $cp->field_first_name[0]['value'] ." ". $cp->field_last_name[0]['value'] ." (". $acct->name .")</li>";
            }
          } // is_admin
        } // is_active
      } // while
      if (!$cnt)
        $output = "<ul class='nycc-empty-ride-withdrawals'><li>No withdrawals</li></ul>";
      else
        $output .= "</ul>";

    } // ride
  } //   if (is_numeric($nid) && ($nid > 0)) {

  return $output;
}

/**
 * Implementation of hook_block().
 */
function nycc_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('NYCC Ride Participants');
      $blocks[0]['cache'] = BLOCK_NO_CACHE;
      $blocks[1]['info'] = t('NYCC Ride Waiting List');
      $blocks[1]['cache'] = BLOCK_NO_CACHE;
      $blocks[2]['info'] = t('Group Links');
      $blocks[2]['cache'] = BLOCK_CACHE_PER_PAGE;
      $blocks[3]['info'] = t('Group Ride Withdrawals');
      $blocks[3]['cache'] = BLOCK_CACHE_PER_PAGE;
      $blocks[4]['info'] = t('Ride Coordinators Email');
      $blocks[4]['cache'] = BLOCK_CACHE_PER_PAGE;
      return $blocks;
    case 'configure':
      return $form;
    case 'save':
      break;
    case 'view':
      if ($delta == 0) {
        $block['content'] = nycc_output_ride_participants();
        $block['subject'] = drupal_strlen($block['content']) ? t('Ride Participants') : "";
      }
      if ($delta == 1) {
        $block['content'] = nycc_output_ride_waitlist();
        $block['subject'] = drupal_strlen($block['content']) ? t('Ride Waiting List') : "";
      }
      if ($delta == 2) {
        $block['subject'] = t('Group Links');
        $block['content'] = nycc_output_group_links_block();
      }
      if ($delta == 3) {
        $block['subject'] = t('Group Ride Withdrawals');
        $block['content'] = nycc_output_group_ride_withdrawals_block();
      }
      if ($delta == 4) {
        $block['subject'] = t('Ride Coordinators Email');
        $block['content'] = nycc_output_ride_coordinators_email_block();
      }
      return $block;
  }
}

// used with printpdf
// todo: allow pass of $node to avoid node_load
function nycc_output_riders_roster_pdf($nid = null) {
  //global $theme_path;
  if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
  if (is_numeric($nid) && ($nid > 0)) {
    $ride = node_load(array('nid' => $nid));
    if ($ride) {
      drupal_set_title($ride->title ."-". substr($ride->field_date_ride_first[0]['value'], 0, 10));
      $output .= views_embed_view('rides_detail_on_riders_list', 'block_1', $nid, $nid);
      // display waiver
      $waiver = node_load(array('nid' => '45438'));
      if ($waiver)
        $output .= $waiver->body;
      // display ride participants
      $leaders = nycc_refs2ids(nycc_noderefs2userrefs($ride->field_ride_leaders));
      $riders = nycc_refs2ids($ride->field_ride_current_riders);
      $output .= views_embed_view('ride_participants', 'block_2', implode("+", array_merge($leaders, $riders)));
      $waiters = nycc_refs2ids($ride->field_ride_waitlist);
      $output .= views_embed_view('ride_participants', 'block_3', implode("+", $waiters));
      //$output .= var_export(implode("+", $waiters),1);
    }
  }
  return $output;
}

function nycc_ride_has_changed($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $rev = nycc_last_approved_revision($ride);
  // title, description, spots, level, distance, speed, date, start time, start time minute, start time, select, from, from_select, leaders?

  if ($ride->title != $rev->title)
    return true;
  if ($ride->field_ride_description[0]['value'] != $rev->field_ride_description[0]['value'])
    return true;
  if ($ride->field_ride_spots[0]['value'] != $rev->field_ride_spots[0]['value'])
    return true;
  if ($ride->field_ride_select_level[0]['value'] != $rev->field_ride_select_level[0]['value'])
    return true;
  if ($ride->field_ride_distance_in_miles[0]['value'] != $rev->field_ride_distance_in_miles[0]['value'])
    return true;
  if ($ride->field_ride_speed[0]['value'] != $rev->field_ride_speed[0]['value'])
    return true;
  if ($ride->field_date_ride_first[0]['value'] != $rev->field_date_ride_first[0]['value'])
    return true;
  if ($ride->field_ride_from[0]['value'] != $rev->field_ride_from[0]['value'])
    return true;
  if ($ride->field_ride_from_select[0]['value'] != $rev->field_ride_from_select[0]['value'])
    return true;
  if ($ride->field_ride_start_time_hour[0]['value'] != $rev->field_ride_start_time_hour[0]['value'])
    return true;
  if ($ride->field_ride_start_time_min[0]['value'] != $rev->field_ride_start_time_min[0]['value'])
    return true;
  if ($ride->field_ride_start_time_select[0]['value'] != $rev->field_ride_start_time_select[0]['value'])
    return true;
  return false;
}

function nycc_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'insert':
    case 'update':
      if ($node->type == 'rides') {

        $ad = $node->field_ride_additional_dates[0]['value'];
        if (drupal_strlen($ad)) {
          $ads = explode( ",", $ad);
          if (is_array($ads)) {
            foreach ($ads as $d) {
              watchdog('nycc_nodeapi', "about to clone ride to date $d", array(), WATCHDOG_INFO);
              nycc_clone_ride($node, $d);
            }
          }
          // TODO: clear additional dates field so that it is not copied?
        }
        if (in_array($node->field_ride_status[0]['value'], array('Submitted', 'Revised')))
          drupal_set_message(t("Please Note: If your ride includes the use of a train you must also complete a <a href=\"https://docs.google.com/forms/d/1-KMVUUHflXyxes6ZFKPqTK54-FKvQ9V2-ympcYZ8b0w/viewform\" target=\"_blank\">Train Request</a> here." ));

        if (in_array($node->field_ride_status[0]['value'], array('Submitted', 'Revised')) && !nycc_can_approve())
          drupal_set_message(t("Please Note: Approval may take 24 to 48 hours (usually, we get to it sooner)."));
      }
      break;
    case 'prepare':

      if ((arg(3) == "relist") && (arg(4) > 0)) {
        $onode = node_load(array('nid' => arg(4)));
        if ($onode) {
          $node->title = $onode->title;
          $node->field_ride_select_level[0]['value'] = $onode->field_ride_select_level[0]['value'];
          $node->field_ride_distance_in_miles[0]['value'] = $onode->field_ride_distance_in_miles[0]['value'];
          $node->field_ride_start_time_hour[0]['value'] = $onode->field_ride_start_time_hour[0]['value'];
          $node->field_ride_start_time_min[0]['value'] = $onode->field_ride_start_time_min[0]['value'];
          $node->field_ride_start_time_select[0]['value'] = $onode->field_ride_start_time_select[0]['value'];
          $node->field_ride_from[0]['value'] = $onode->field_ride_from[0]['value'];
          $node->field_ride_from_select[0]['value'] = $onode->field_ride_from_select[0]['value'];
          $node->field_ride_speed[0]['value'] = $onode->field_ride_speed[0]['value'];
          $node->field_ride_description[0]['value'] = $onode->field_ride_description[0]['value'];
          $node->field_ride_spots[0]['value'] = $onode->field_ride_spots[0]['value'];
          $node->field_ride_type[0]['value'] = $onode->field_ride_type[0]['value'];
          $node->field_ride_signups[0]['value'] = $onode->field_ride_signups[0]['value'];
          $node->field_ride_attachments = $onode->field_ride_attachments;
          $node->field_ride_image = $onode->field_ride_image;
          $node->field_ride_cue_sheet = $onode->field_ride_cue_sheet;
          $node->field_ride_status[0]['value'] = "Submitted";
        }
        drupal_set_message("This is a re-listing of ". $node->title);
        drupal_set_message("You are set as the leader for this ride.");
        drupal_set_message("Please be sure to select a new date for the ride.");
      }

      //if ($node->type == 'rides') {
        //$node->field_ride_timestamp[0]['value'] = date("m-d-Y h:m:s");// $timestamp;
        //$node->field_ride_dow[0]['value'] = date("l", $timestamp);
      //}

      if ($node->type == 'rides' && arg(2) == 'edit') {
        $node->field_ride_additional_dates[0]['value'] = "";
		if (!nycc_can_approve()) {
			drupal_set_message("<b>Please Note:</b> If you modify key fields on this ride it will be taken offline until the Ride Coordinator has had a chance to review the changes.");
			drupal_set_message("While we make every effort to approve it  a timely manner, It could take up to 48 hours for the change to be approved.");
			drupal_set_message("If you must make changes to the ride within 48 hours of the ride start, we'd suggest that your reach out to <a href='mailto:" .
						 $node->field_ride_select_level[0]['value'] . "-rides@nycc.org?subject=Urgent: I need to make changes to a ride!'>" .  $node->field_ride_select_level[0]['value'] . 
						 "-rides@nycc.org</a> to confirm that they can approve in a timely manner <b>before you make the changes</b>");
		}
      } // ride edit

      if ($node->type == 'rides' && arg(0) == 'node' && arg(1) == 'add') {
        // preload group members if group ride and add riders checkbox is checked
        $gp = og_determine_context();
        if ($gp && $gp->field_group_add_riders[0]['value'] != "false") {
          $sql = og_list_users_sql();
          $result = db_query($sql, $gp->nid);
          $cnt = 0;
          while ($row = db_fetch_object($result)) {
            $acct = user_load($row->uid);// check that user is active group member and not a captain/admin
            if ($acct && is_array($acct->og_groups[$gp->nid]) && $acct->og_groups[$gp->nid]['is_active']) {
              // check that user is not already in list if this gets moved to an edit/approval position
              if ($acct->og_groups[$gp->nid]['is_admin']) {
                $cp = content_profile_load('profile', $acct->uid);
                $node->field_ride_leaders[] = array("nid" => $cp->nid);
              } else {
                $node->field_ride_current_riders[] = array("uid" => $row->uid);
                $cnt++;
              }
            }
          } // while
           $node->field_ride_spots[0]['value'] = $cnt;
        } // if group
        //dsm($node);
      } // ride add


      break;
    case 'presave':
      if ($node->type == 'rides') {

        // set dow and timestamp
        $node->field_ride_timestamp[0]['value'] = nycc_get_ride_time_as_text($node);
        $node->field_ride_dow[0]['value'] = date("l", nycc_get_ride_time($node));

        // treat 0 as blank
        if ($node->field_ride_spots[0]['value'] === 0)
          $node->field_ride_spots[0]['value'] = "";
		if (arg(0) != "nycc" && arg(0) != "inbound") // if edit is not coming from inbound email processor
		{
	    	if (!nycc_can_approve() && in_array($node->field_ride_status[0]['value'] , array('Approved', 'Cancelled', 'Pending', 'Flagged')) && nycc_ride_has_changed($node))
	        {
    	    	$node->field_ride_status[0]['value'] = 'Revised';
    	    }
		}
        // remove riders from waitlist
        $current_riders = $node->field_ride_current_riders;
        $waiters = $node->field_ride_waitlist;
        if (is_array($current_riders) && is_array($waiters)) {
          foreach($current_riders as $rider) {
            // riders and waiters are userrefs
            //watchdog('test', "scanning waiters for rider ". $rider['uid']);
            foreach($waiters as $ndx => $waiter) {
              //watchdog('test', "scanning waiter[$ndx]: ". $waiter['uid']);
              if ($rider['uid'] == $waiter['uid']) {
                unset($node->field_ride_waitlist[$ndx]);
                watchdog("rides", "waiter: %uid removed from waitlist: %nid (%rname)", array('%uid'=> $waiter['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
              }  //if
            } // foreach waiter
          } // foreach rider
        } // if currentriders and waiters

        // remove leaders from participant list
        $leaders = $node->field_ride_leaders;
        $current_riders = $node->field_ride_current_riders;
        if (is_array($current_riders) && is_array($leaders)) {
          foreach($leaders as $leader) {
            // leaders are noderef, but riders are userrefs
            //watchdog('test', "checking leader ". $leader['nid']);
            // note that leader array also has _error_element in it, so don't pass directly
            $leader_profile_node = node_load($leader['nid']);
            if ($leader_profile_node) {
              //watchdog('test', "scanning riders for leader ". $leader['nid']);
              foreach($current_riders as $ndx => $current_rider) {
                //watchdog('test', "scanning rider[$ndx]: ". $current_rider['uid']);
                if ($current_rider['uid'] == $leader_profile_node->uid) {
                  unset($node->field_ride_current_riders[$ndx]);
                  drupal_set_message("Leader ". $leader_profile_node->field_first_name[0]['value'] ." ". $leader_profile_node->field_last_name[0]['value'] ." automatically removed from participants list.");
                  watchdog("rides", "leader: %uid (%uname) removed from particpants list: %nid (%rname)", array('%uid'=> $current_rider['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
                }  //if
              } // foreach current_rider
            } // if leader_profile_node
          } // foreach leader
        } // if currentriders and leaders

        // todo: change cancelled to submitted?

        // TODO: send emails to all new riders
        $numriders = nycc_count_riders($node);
        $numwaiters = nycc_count_waiters($node);
        $numspots = $node->field_ride_spots[0]['value'];
        //if (!($numspots > 0))
        //  $node->field_ride_signups[0]['value'] = "No signups or waiting list";
        if (nycc_ride_allows_waitlist($node) && ($numspots > $numriders) && ($numwaiters > 0)) {
          $numnewspots = min($numspots - $numriders, $numwaiters);
          for ($i = 0; $i < $numnewspots; $i++) {
            $waiter = array_shift($node->field_ride_waitlist);
            $node->field_ride_current_riders[] = array("uid" => $waiter['uid']);
            //   drupal_set_message("One person on waitlist moved to participant list.");
            $waiternode = user_load($waiter['uid']); // only for watchdog
            watchdog("rides", "user: %uid (%uname) auto joined from ride waitlist: %nid (%rname)", array('%uid'=> $waiter['uid'], '%uname' => $waiternode->name, '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
            
           //event logging
            nycc_log_action($node, $waiter['uid'], "Auto-Join From Waitlist");
          }
          drupal_set_message($numnewspots ." ". ($numnewspots == 1 ? "person" : "people") ." on waitlist moved to participant list.");
        }
      }

      if ($node->type == 'profile') {
        $account = user_load($node->uid);
        if ($account) {
          // strip spaces from imported names
          //if (false !== strpos($account->name, " ")) {
          //  $account->name = str_replace($account->name, " ", "");
          //  user_save($account);
          //}
          $eny_import_role = 22;
          $paid_member_role = 3;
          // eny trial period role set
          if (isset($account->roles[$eny_import_role])) {
            $oct1 = strtotime("Oct 1"); // current year
            $node->field_profile_last_eny_year[0]['value'] = date("Y");

            $exp = nycc_get_membership_expiration_date($node->uid);
            /*
            if ($exp) {
              // already a member with an expiration date
              // check if date is before Oct 1 of this year, if so extend to Oct 1 otherwise do nothing
              //if (($exp < $oct1) && !isset($account->roles[$paid_member_role])) {
              //watchdog('nycc_nodeapi', "about to extend membership for user/". $account->uid);
              //uc_roles_renew($account, $paid_member_role, $oct1);
              //}
            } else {
              // if user does not already have paid-membership role (e.g., lifetime member)
              // set expiration date to Oct 1 and assign paid-member role
              if (!isset($account->roles[$paid_member_role])) {
                //watchdog('nycc_nodeapi', "about to grant membership for user/". $account->uid);
                //uc_roles_grant($account, $paid_member_role, $oct1);
              }
            } // else
            */
          } else {
            // allows manual renew date setting?
            // grant or renew membership if import reg date set
            $rdi = $node->field_registration_date_import[0]['value'];
            if (drupal_strlen($rdi)) {
              $rdi = strtotime($rdi);
              if ($rdi) {
                // the following requires that we are in presave
                $node->field_registration_date_import[0]['value'] = "";
                //$account = user_load($node->uid);
                //if ($account) {
                $exp = nycc_get_membership_expiration_date($node->uid);
                $timestamp = ($exp ? $exp : $rdi) +  365 * 24 * 60 * 60;
                if ($timestamp > time()) {
                  $paid_member_role = 3;
                  if ($exp) {
                    //watchdog('nycc_nodeapi', "about to renew membership for user/". $account->uid);
                    //uc_roles_renew($account, $paid_member_role, $timestamp);
                  } else {
                    //watchdog('nycc_nodeapi', "about to grant membership for user/". $account->uid);
                    //uc_roles_grant($account, $paid_member_role, $timestamp);
                  }
                } else {
                  drupal_set_message("Registration date import field already expired for <a href='/node/$nid'>node/$nid</a>.");
                }
                //}
              } else {
                $nid = $node->nid;
                drupal_set_message("Invalid date ignored in registration date import field for <a href='/node/$nid'>node/$nid</a>: ". $node->field_registration_date_import[0]['value']);
              }
            }
          } // not eny import
        } // account


      } /* profile */

      if ($node->type == 'group') {

        $node->og_selective = 1;  // always set group to require membership approval

        // check for that all captains are admins for the group and have the captain role
        $roles = user_roles(TRUE);
        $rid = array_search("SIG or STS Captain", $roles);
        $captains = $node->field_group_captain;   // note that this field name is singular, but multivalued node ref
        foreach($captains as $ndx => $capt) {
          $capt_profile_node = node_load($capt['nid']);
          if ($capt_profile_node) {
            $acct = user_load($capt_profile_node->uid);
            if ($acct) {
              if (!isset($acct->roles[$rid])) {
                $roles = $acct->roles + array($rid => 'SIG or STS Captain');
                user_save($acct, array('roles' => $roles));
              }
              $created = is_array($acct->og_groups[$node->nid]);
              $is_active = $created ? $acct->og_groups[$node->nid]['is_active'] : 0;
              $is_admin = $created ? $acct->og_groups[$node->nid]['is_admin'] : 0;
              $args = array();
              $args['is_active'] = 1;
              $args['is_admin'] = 1;
              if (!($created && $is_active && $is_admin))
                og_save_subscription($node->nid, $acct->uid, $args);
              //drupal_set_message("checking captain: ". $acct->name .": ". $created);
              unset($node->field_group_captain[$ndx]);
            }  // acct
          }  // capt_profile_node
        }  // foreach capt

        // import signups
        $pid = $node->field_group_parent[0]['nid'];
        if ($pid > 0) {
          $sups = signup_get_signups($pid);
          //dsm($sups);
          foreach($sups as $sup) {
            $acct = user_load($sup->uid);
            if ($acct) {
              $created = is_array($acct->og_groups[$node->nid]);
              $is_active = $created ? $acct->og_groups[$node->nid]['is_active'] : 0;
              //drupal_set_message("checking signup: ". $acct->name);
              if ($node->field_group_add_signups[0]['value'] != "false") {
                $args = array();
                $args['is_active'] = 1;
                if (!($created && $is_active)) {
                  og_save_subscription($node->nid, $acct->uid, $args);
                  drupal_set_message("Adding signup: ". $acct->name);
                }
              }
            }  // acct
          }  // foreach sup
          $node->field_group_add_signups[0]['value'] = "false";
        }


        //if ($node->field_group_forum[0]['value'] == -1) {
          // todo: Check for existing forum with same title before creating.
          // todo: If forum exists with same title, should we use it? message?
          // todo: consider group node name change and how to sync container

          // Note: 1 is forum vocabulary, 18 is group forums (old: 11 was sigs and sts forums)
          //$gf = array('vid' => 1, 'name' => $node->title, 'parent' => 18, 'description' => "This is the ". $node->title ." forum. Use this to communicate with other members of the group.");
          //$status = taxonomy_save_term($gf);
          // make it a container if using sub-forums
          //if ($status == SAVED_NEW) {
          //  $containers = variable_get('forum_containers', array());
          //  $containers[] = $gf['tid'];
          //  variable_set('forum_containers', $containers);
          //}

          /*
          $gfl = array('vid' => 1, 'name' => 'Leaders Forum', 'parent' => array($gf['tid']), 'description' => "Private group leaders forum.", weight => -5);
          $status = taxonomy_save_term($gfl);

          $gfp = array('vid' => 1, 'name' => 'Participants Forum', 'parent' => array($gf['tid']), 'description' => "General discussions topics, visible to all group members.", weight => 5);
          $status = taxonomy_save_term($gfp);
          */

          // reminder: no need to save $node in nodeapi insert/update!
          //$node->field_group_forum[0]['value'] = $gf['tid'];

          //drupal_set_message("Group forum created with name ". $node->title .".");

          // todo: forum privacy? how set?

        //}  /* og group node presave*/
      }  /*group */


      break;

    case 'validate':  // $a3 is $form in this case

      // TODO: check for dates in future for non-approved rides

      // check for spots > riders count
      $numriders = nycc_count_riders($node);
      $numspots = $node->field_ride_spots[0]['value'];
      $numwaiters = nycc_count_waiters($node);
      if ($numspots > 0) {
        if ($numspots < $numriders)
          form_set_error('field_ride_spots', "The number of spots can not be less than the number of currently signed up riders (". $numriders .").");
        if ($node->field_ride_signups[0]['value'] == "No signups or waiting list")
          form_set_error("field_ride_spots", "Max. Participants must be blank when Sign-ups is 'No signups or waiting list'");
        if (($numwaiters > 0) && ($node->field_ride_signups[0]['value'] != "Signups with waiting list"))
          form_set_error("field_ride_signups", "There are people on the waiting list; please select 'Signups with waiting list' or increase the number of Max. Participants.");

      } else {
        //if  ($numriders > 0)
        // TODO: warn that this will delete rider and wait lists, plus send emails?
        //if ($node->field_ride_signups[0]['value'] == "Signups with waiting list")
        //  form_set_error("field_ride_spots", "Max. Participants must not be blank or 0 when Sign-ups is set to 'Signups with waiting list'");
      }
      //var_dump(array($a3['#redirect'], $a3['#validate'], $a3['#submit'], ));
      if ($node->type == 'rides') {
        $ad = $node->field_ride_additional_dates[0]['value'];
        if (drupal_strlen($ad)) {
          $ads = explode( ",", $ad);
          if (is_array($ads)) {
            foreach ($ads as $d) {
              if (!nycc_get_date($d) && drupal_strlen(trim($d)))
                form_set_error('additional_dates', "Invalid additional date: $d");
            }
          }
        }
      }
      break;
    case 'view':
    
     //This hides the body from cue sheet teasers

      if ($node->type == 'cue_sheet' && $a3 /* teaser */) {
	    unset($node->content['body']);

      }   
        
      if ($node->type == 'gpcaptspost') {
        $roles = array_values($user->roles);
        $ok = in_array('administer', $roles) || in_array('vp of rides', $roles) || nycc_is_captain($node);
        if (!$ok)
          drupal_access_denied();
      }
      if ($node->type == 'group') {
        //dsm($node);
        $node->content['body']['#weight'] = 1;
        $node->content['field_group_logo']['#weight'] = -10;
        //$node->content['#content_extra_fields']['body_field']['#weight'] = 1;
        /*
          $pid = $node->field_group_parent[0]['nid'];
          if ($pid > 0) {
            $sups = signup_get_signups($pid);
            dsm($sups);
          }
        */
      }  // group


      if ($node->type == 'event') {
        // TODO: check for $node->signup = 1???
        if (strtolower($node->field_event_view_signups[0]['value']) == "yes") {
          $view = views_embed_view('signup_user_list_public', 'default', $node->nid);
        } else {
          $view = "";
        }
        $node->content['field_event_view_signups']['#weight'] = 40;
        $node->content['field_event_view_signups']['field']['items'][0]['#item']['safe'] = $view;
        $node->content['field_event_view_signups']['field']['items'][0]['#item']['value'] = $view;
        //dsm($node);

      } // event


      // make url into a link
      if ($node->type == 'obride') {
        //dsm($node);
        $node->content['field_obride_link']['field']['items'][0]['#item']['safe'] = l($node->field_obride_link[0]['value'], $node->field_obride_link[0]['value']);
      }


      if ($node->type == 'rides') {
        $uid = $user->uid;
        // check if user has already joined a ride on this date +/- 4 hours
        // removed condition: $node->field_ride_type[0]['value'] == "Cue Sheet Ride" &&
        if (!nycc_is_rider($node, $user) && nycc_get_user_ride_counts(strtotime(nycc_get_ride_datetime($node)), $uid)) {
          $rtitle = $node->title;
          drupal_set_message("Alert: You are signed-up for a conflicting ride. NYCC allows members to sign up for only one ride during the same 4-hour time slot. To join $rtitle, you need drop the conflicting ride <a href='/user/$uid/myrides' target='blank'>see all your rides here</a>.");
          //drupal_goto("node/$nid");
        }
        $node->content['field_ride_spots']['field']['#title'] = t("Remaining/Spots");
        $numwaiters = nycc_count_waiters($node);
        $numriders = nycc_count_riders($node->field_ride_current_riders);
        $node->content['field_ride_spots']['field']['items'][0]['#item']['value'] = ($node->field_ride_spots[0]['value'] ? $node->field_ride_spots[0]['value'] - $numriders .t(" of "). $node->field_ride_spots[0]['value'] : (t("Unlimited") . (($node->field_ride_signups[0]['value'] == "No signups or waiting list") ? "/No Sign-ups" : "/". $numriders))) . ((($node->field_ride_signups[0]['value'] != "No signups or waiting list") && $numwaiters) ? " (". $numwaiters ." waiting)":"");
        // treat null rides signup as allowing waiting lists
        // TODO: how can we look up the default value for this cck field?
        if (!$node->field_ride_signups[0]['value'])
          $ride->field_ride_signups[0]['value'] == "Signups with waiting list";
        if (!nycc_ride_is_upcoming($node) && (arg(0) == 'node'))
          drupal_set_message("NOTE: This ride has already taken place.");

        // disable rides until 10 days prior to event - part II
        $ridetime = strtotime(nycc_get_ride_datetime($node));
        $now = time();

        // TODO: why does this message appear during manual cron run? 
        // add user check for now in case it is happening during all cron runs

        
//        if ($user->uid && (($ridetime - $now) > 10 * 60 * 60 * 24)) {
        if ($user->uid && ($node->field_ride_type[0]['value'] != "Club Event") && (($ridetime - $now) > 10 * 60 * 60 * 24)) {
          drupal_set_message("PLEASE NOTE: Ride signups are enabled 10 days before the event (". date('l, F jS, Y \@ h:i A', $ridetime - 10 * 60 * 60 * 24) .").");
        }

        // check for more than two overlapping waitlists - part II
        if (nycc_ride_overlaps_user($uid, $ridetime) > 0) {
          drupal_set_message("PLEASE NOTE: Add Me To The Waiting List is disabled because you are already on two waiting lists for rides within 4 hours of this ride.  You can view your waitlist signups in your <a href='/user/$uid/mywaitlists'>profile</a>");
        }

        /*
        if ($user->uid == 1)
          drupal_set_message("ridetime: ". nycc_get_ride_time($node) .", upcoming: ". nycc_ride_is_upcoming($node) .", current time:". time() . ", ride: ". date("c", nycc_get_ride_time($node)) .", tz: ". date_default_timezone_get());
        */
      }
      break;
  }
}



function nycc_ride_coordinators() {
  $coordinators = array();
  $sql = 'SELECT c.field_ride_coordinator_value AS level, n.title as name, p.field_phone_value as phone, u.mail, u.uid FROM {content_field_ride_coordinator} c, {content_type_profile} p, {node} n, {users} u WHERE n.nid=c.nid AND p.nid=n.nid AND u.uid=n.uid AND field_ride_coordinator_value IS NOT NULL ORDER BY 1';
  $results = db_query($sql);
  while ($coordinator = db_fetch_object($results)) {
    $coordinator->level = strtoupper(substr($coordinator->level,0,1)); // lcfirst($coordinator->level);
    $coordinators[] = $coordinator;
  }
  return $coordinators;
}

function nycc_output_ride_coordinators() {
  $output = "<div class='ride-coordinators'>";
  $output .= "<label>". t("Ride Coordinators:") ."</label>";
  $coordinators = nycc_ride_coordinators();
  foreach ($coordinators as $coordinator) {
    if (strtoupper($coordinator->level) == "A")
      $output .= "<div class='coordinator-a-rides'>A-rides: <a href='/user/" . $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" . $coordinator->name . "</a>,<br/>" . $coordinator->phone . ",<br/><a title='Send email...' href=mailto:a-rides@nycc.org>a-rides@nycc.org</a></br></br></div>";

    if (strtoupper($coordinator->level) == "B")
      $output .= "<div class='coordinator-b-rides'>B-rides: <a href='/user/" . $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" . $coordinator->name . "</a>,<br/>" . $coordinator->phone . ",<br/><a title='Send email...' href=mailto:b-rides@nycc.org>b-rides@nycc.org</a></br></br></div>";

    if (strtoupper($coordinator->level) == "C")
      $output .= "<div class='coordinator-c-rides'>C-rides: <a href='/user/" . $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" . $coordinator->name . "</a>,<br/>" . $coordinator->phone . ",<br/><a title='Send email...' href=mailto:c-rides@nycc.org>c-rides@nycc.org</a></div>";
  }
  $output .= "</div>";
  return $output;
}

function nycc_output_ride_classification() {
  $output = "<div class='ride-classification'>";
  $output .= "<ul>";
  $output .= "  <li>A = Fast, with paceline skills required</li>";
  $output .= "  <li>B = Moderate</li>";
  $output .= "  <li>C = Gentle (a good introduction to the Club)</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

// called from theme override of theme_node_form
function nycc_output_group_node_form($form, $op = 'add') {
  //dsm($form);
  //$output .= "<h3 style='color:red'>Group form - Pleae do not use yet</h3>";
  $output .= drupal_render($form['title']);
  $output .= drupal_render($form['og_description']);
  $output .= drupal_render($form['body_field']);
  $output .= drupal_render($form['field_group_parent']);
  $output .= drupal_render($form['field_group_add_signups']);
  $output .= drupal_render($form['field_group_logo']);
  $output .= drupal_render($form['field_group_captain']);
  $output .= drupal_render($form['field_group_add_riders']);
  //$output .= drupal_render($form['field_group_forum']);
  //$output .= drupal_render($form['field_group_forum_private']);


  $buttons = drupal_render($form['buttons']);
  $output .= $buttons;

  $output .= "<hr/>";

  // hide the rest for now
  $output .= "<div class='hide'>";
  $output .= drupal_render($form);
  //$output .= $buttons;
  $output .= "</div>";
  return $output;
}

// called from theme override of theme_node_form
function nycc_output_ride_node_form($form, $op = 'add') {
  //dsm($form);
  $status = nycc_get_ride_status($form['#node']);

  if ($op == 'edit' && ($status == 'Approved'))
    $output .= drupal_render($form['revision_information']);

  $output .= "<h3>Step 1. Schedule ride dates:</h3>";

  //$output .= drupal_render($form['dp-normal-1']);

  //$output .= drupal_render($form['field_date_ride_first']);

  $output .= drupal_render($form['field_ride_additional_dates']);
  $output .= drupal_render($form['choose_calendar_target']);
  $output .= drupal_render($form['nycc_rides_datepicker']);
  $output .= drupal_render($form['existing_rides_wrapper']);

  //$output .= "<input id='ride-add-recurring' type='button'value='Clone This Ride ▼'/>";
  //$output .= "<div id='ride-add-recurring-fields'>";
  //$output .= drupal_render($form['additional_dates']);
  //$output .= "</div>";

  $output .= "<h3>" .t("Step 2. Specify ride details:"). "</h3>";

  $output .= drupal_render($form['field_ride_status']);
  $output .= drupal_render($form['field_ride_type']);
  $output .= drupal_render($form['field_ride_select_level']);
  $output .= drupal_render($form['title']);
  $output .= drupal_render($form['field_ride_speed']);
  $output .= drupal_render($form['field_ride_distance_in_miles']);
  $output .= drupal_render($form['field_ride_signups']);
  $form['field_ride_spots']['#title'] = 'Max. Participants';
  $form['field_ride_spots'][0]['#title'] = 'Max. Participants';
  $form['field_ride_spots'][0]['value']['#title'] = 'Max. Participants';
  $output .= drupal_render($form['field_ride_spots']);
  $output .= drupal_render($form['field_ride_start_time_hour']);
  $form['field_ride_start_time_min']['#title'] = "";
  $form['field_ride_start_time_min']['value']['#title'] = "";
  $output .= drupal_render($form['field_ride_start_time_min']);
  $form['field_ride_start_time_select']['#title'] = "";
  $form['field_ride_start_time_select']['value']['#title'] = "";
  $output .= drupal_render($form['field_ride_start_time_select']);
  $output .= drupal_render($form['field_ride_from_select']);
  $output .= drupal_render($form['field_ride_from']);
  $form['field_ride_description']['#cols'] = 50;
  $output .= drupal_render($form['field_ride_description']);

  $output .= "<h3>" .t("Step 3. Select ride leaders:"). "</h3>";
  //$output .= "<small>(Start typing last name & wait a second for the system to query our database)</small>";
  $form['field_ride_leaders']['field_ride_leaders_add_more']['#value'] = t("Add another ride leader");
  $output .= drupal_render($form['field_ride_leaders']);
  if ($op == 'add') {
    unset($form['field_ride_current_riders']);
    unset($form['field_ride_waitlist']);
  } else {
    $form['field_ride_current_riders']['field_ride_current_riders_add_more']['#value'] = t('Add another rider');
    $output .= drupal_render($form['field_ride_current_riders']);
    $output .= drupal_render($form['field_ride_waitlist']);
  }

  $output .= "<h3>" .t("Step 4. Upload some images or file attachments (optional):"). "</h3>";
  $form['field_ride_image']['field_ride_image_add_more']['#value'] = t('Add another image');
  $output .= drupal_render($form['field_ride_image']);

  $form['field_ride_attachments']['field_ride_attachments_add_more']['#value'] = t('Attach another file');
  $output .= drupal_render($form['field_ride_attachments']);

  $output .= "<h3>" .t("Step 5. Reference a ride library cue-sheet (optional):"). "</h3>";
  $output .= drupal_render($form['field_ride_cue_sheet']);

  $action = !nycc_can_approve() && in_array($status, array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";

  //if (nycc_can_approve() || ($op=='add'))
  //if ($op == 'add')
    //$output .= nycc_output_button("$action This Ride", "#", "nycc-ride-save nycc-ride-save-bottom", 'nycc_show_ride_submit_click(); return false;', "");
  //else
    $output .= nycc_output_button("$action This Ride", "#submit-top", "nycc-ride-save nycc-ride-save-bottom", 'nycc_show_ride_submit_confirm();', "");

  $output .= "<a name='submit-top'></a>";

  //if (!nycc_can_approve() && in_array($status, array('Approved', 'Pending', 'Cancelled', 'Flagged'))) {
  //if ($op != 'add')
    $output .= drupal_render($form['submit_instructions']);
    $output .= drupal_render($form['buttons']['submit']);
    $output .= drupal_render($form['submit_cancel']);
  //}

  $buttons = drupal_render($form['buttons']);

  // hide the rest for now
  $output .= "<div class='hide'>";
  $output .= drupal_render($form);
  $output .= $buttons;
  $output .= "</div>";

  return $output;
}

function nycc_existing_rides_js() {
  $ride_date = $_POST["date"];
  print nycc_output_existing_rides($ride_date);
}

function nycc_output_existing_rides($ride_date) {
  $found = false;
  $ride_date_ui = nycc_get_date($ride_date, "F d, Y");
  $ride_date_db = nycc_get_date($ride_date);
  $output = "<div class='existing-rides'>";
  $output .= "<h3>" .t("Rides planned for"). " $ride_date_ui ($ride_date_db)</h3>";
  $output .= "<ul>";
  $q = db_query("SELECT r.nid, n.title, r.field_ride_select_level_value AS level FROM {content_type_rides} r, {node} n WHERE n.nid=r.nid AND n.vid=r.vid AND n.status <> 0 AND field_date_ride_first_value LIKE '%s%%'", $ride_date_db);
  while($row = db_fetch_array($q)) {
    $found = true;
    $output .= "<li class='ride'><a target='_blank' title='View ride details...' href=\"/node/". $row['nid'] ."\"> " . $row['title'] . "</a> - Level: " . $row['level'] . "</li>";
  }
  if (!$found)
    $output .= "<li class='no-rides'>" .t("No other rides found for this date."). "</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

// only works for node types
// function nycc_access($op, $node, $account) {
//   // allow any leader to edit rides
//   if ($op == 'update' && $node->type == 'rides') {
//     return nycc_can_modify_ride($node, $account);
//   }
// }

function nycc_is_leader($ridenode, $account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if ($ridenode && $ridenode->field_ride_leaders && is_array($ridenode->field_ride_leaders)) {
    $cp = content_profile_load('profile', $account->uid);
    foreach($ridenode->field_ride_leaders as $leader) {
      if ($cp->nid == $leader['nid'])
        return true;
    }
  }
  return false;
}

function nycc_is_rider($ridenode, $account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if ($ridenode && $ridenode->field_ride_current_riders && is_array($ridenode->field_ride_current_riders)) {
    foreach($ridenode->field_ride_current_riders as $item) {
      if ($account->uid == $item['uid'])
        return true;
    }
  }
  return false;
}

// note: check based on any group node, including group node itself
function nycc_is_captain($node, $account = null) {
  global $user;
  if ($account > 0)
    $account = user_load($account);
  if (!$account)
    $account = $user;
  if ($node > 0)
    $node = node_load($node);
  if (!$node || !$account || !is_array($account->og_groups))
    return false;
  // check if account is an admin of the specific group
  if ($node->type == 'group') {
    $gid = $node->nid;
    // check if $account->og_groups has index value of gid
    if ($gid && array_key_exists($gid, $account->og_groups) && ($account->og_groups[$gid]['is_admin'] == 1))
      return true;
    return false;
  }  // group
  // check based on group content (ride, blog, etc), but not group type
  if (is_array($node->og_groups)) {
    // get (first) groupid that node is in (assume nodes in at most one group)
    // WARNING: do not save node unless next line replaced with safe gid calculation
    $gps = $node->og_groups;
    $gid = array_shift($gps);
    if ($gid && key_exists($gid, $account->og_groups) && ($account->og_groups[$gid]['is_admin'] == 1))
      return true;
  }
  return false;
}

function nycc_is_waiting($ridenode, $account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if ($ridenode && $ridenode->field_ride_waitlist && is_array($ridenode->field_ride_waitlist)) {
    foreach($ridenode->field_ride_waitlist as $item) {
      if ($account->uid == $item['uid'])
        return true;
    }
  }
  return false;
}

// todo: consolidate these two functions, passing the user ref field
// todo: replace with sql query instead of node_load
function nycc_count_attendees($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $attendees = $node->field_ride_attendees;
  } else if (is_array($data))
    $attendees = $data;
  else if (is_object($data))
    $attendees = $data->field_ride_attendees;
  else
    return 0;
  $no_of_attendees = 0;
  if (is_array($attendees)) {
    foreach($attendees as $val) {
      if (is_numeric($val['uid']))
        $no_of_attendees = $no_of_attendees + 1;
      //foreach($val as $attendee_uid){
      //  if (is_numeric($attendee_uid))
      //    $no_of_attendees = $no_of_attendees + 1;
      //}
    }
  }
  return $no_of_attendees;
}

// replace with sql query instead of node_load
function nycc_count_riders($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $riders = $node->field_ride_current_riders;
  } else if (is_array($data))
    $riders = $data;
  else if (is_object($data))
    $riders = $data->field_ride_current_riders;
  else
    return 0;
  $no_of_riders = 0;
  if (is_array($riders)) {
    foreach($riders as $val){
      if (is_numeric($val['uid']))
        $no_of_riders = $no_of_riders + 1;
    }
  }
  return $no_of_riders;
}

function nycc_count_waiters($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $waiters = $node->field_ride_waitlist;
  } else if (is_array($data))
    $waiters = $data;
  else if (is_object($data))
    $waiters = $data->field_ride_waitlist;
  else
    return 0;
  $no_of_waiters = 0;
  if (is_array($waiters)) {
    foreach($waiters as $val){
      if (is_numeric($val['uid']))
        $no_of_waiters = $no_of_waiters + 1;

      // foreach($val as $current_waiter_uid){
      //    if (is_numeric($current_waiter_uid))
      //      $no_of_waiters = $no_of_waiters + 1;
      //  }
     }
  }
  return $no_of_waiters;
}

function nycc_refs2ids($refs) {
  $ids = array();
  if (!is_array($refs))
    return $ids;
  foreach ($refs as $ref) {
    $id = array_values($ref);
    $ids[] = $id[0];
  }
  return $ids;
}

function nycc_noderefs2userrefs($nrefs) {
  $urefs = array();
  if (!is_array($nrefs))
    return $urefs;
  foreach ($nrefs as $nref) {
    $cp = node_load(array('nid' => $nref['nid']));
    if ($cp)
      $urefs[] = array('uid' => $cp->uid);
  }
  return $urefs;
}

function nycc_can_modify_ride($ride, $account = null) {
  if (nycc_is_leader($ride, $account))
    return true;
  if (nycc_is_captain($ride, $account))
    return true;
  return nycc_can_approve($account);
}

function nycc_can_approve($account = null) {
  global $user;
  if (!$account)
    $account = $user;
  if (!is_object($account))
    return false;
  $roles = array_values($account->roles);
  if (!is_array($roles))
    return false;
  if (in_array('administer', $roles) || in_array('vp of rides', $roles) || in_array('ride coordinator', $roles))
    return true;
  // just check for ride coordinator role and do not check for level as we are not comparing with ride level anyway
  /*
  $cp = content_profile_load('profile', $account->uid);
  foreach ($cp->field_ride_coordinator as $rc) {
    if (drupal_strlen($rc['value']))
      return true;
  }
  */
  return false;
}

function nycc_output_button($title, $href, $class = "", $onclick = "", $msg = "") {
  $titlesafe = str_replace("'", "&apos;", $title);
  $onclicksafe = str_replace("'", "&apos;", $onclick);
  $hrefsafe = str_replace("'", "&apos;", $href);
  $output = "<div class='nycc-button-wrapper $class'>". ($msg ? "<div>$msg</div>" : "") ."<a href='$hrefsafe' title='$titlesafe' ". ($onclicksafe ? "onclick='$onclicksafe'" : "") ." >$title</a></div>";
  return $output;
}

function nycc_output_block($title, $html, $classes = "") {
  $title = drupal_strlen($title) ? "<h2>$title</h2>" : "";
  $output = "<div class='nycc-block $classes'>$title$html</div>";
  return $output;
}

function nycc_has_required_profile_info() {
  global $user;
  $cp = content_profile_load('profile', $user->uid);
  return drupal_strlen($cp->field_emergency_contact_no[0]['value'])
      && drupal_strlen($cp->field_contact_name[0]['value']);
}

function nycc_get_leader_emails($leaders, $separator = ", ") {
  global $user;
  foreach($leaders as $leader) {
    if (drupal_strlen($output))
      $output .=  $separator;
    $cp = node_load(array('nid' => $leader['nid']));
    $account = user_load($cp->uid);
    $title = $cp->title;
    $mail = $account->mail;
    if ($user->uid && in_array("paid-member", $user->roles))
      $output .= "<a href='mailto:$mail'>$title</a>";
    else
      $output .= $title;
  }
  return $output;
}





function nycc_get_rider_emails($riders, $separator = ", ") {
  foreach($riders as $rider) {
    if (drupal_strlen($output))
      $output .=  $separator;
    $account = user_load($rider['uid']);
    $cp = content_profile_load('profile', $account->uid);
    $title = $cp->title;
    $mail = $account->mail;
    $output .= "<a href='mailto:$mail'>$title</a>";
  }
  return $output;
}

function nycc_get_all_leader_emails($ride) {
  //if ($ride > 0)
  //  $ride = node_load($ride);
  if (!$ride || $ride->type != 'rides' || !$ride->field_ride_leaders || !is_array($ride->field_ride_leaders))
    return "";
  foreach($ride->field_ride_leaders as $leader) {
    if (drupal_strlen($mail))
      $mail .= ",";
    $cp = node_load(array('nid' => $leader['nid']));
    $account = user_load($cp->uid);
    $mail .= $account->mail;
  }
  return $mail;
}

function nycc_get_all_leader_names($ride) {
  if ( $ride->type != 'rides' || !$ride->field_ride_leaders || !is_array($ride->field_ride_leaders))
    return "";
 
  foreach($ride->field_ride_leaders as $leader) {
    
//    watchdog("rides", " processing leader with nid: " . $leader_uid);
    if (drupal_strlen($names))
        $names .= ", ";
   if (is_numeric($leader['nid']) && $leader['nid'] >0) {
       $cp = node_load(array('nid' => $leader['nid']));
       
       if(is_object($cp)) {
         $names .= $cp->field_first_name[0]['value'] . " " . $cp->field_last_name[0]['value'];
//        	watchdog("rides", "nycc_get_all_leader_names: names is now: " . $names);
//       } else {
//            watchdog("rides", "nycc_get_all_leader_names: content profile is null");
       }
//    } else {
//         watchdog("rides", "nycc_get_all_leader_names: leader->uid is null or 0 ");
    }
  }
  return $names;
}



function nycc_get_all_rider_emails($ride, $include_leaders = true) {
  //if ($ride > 0)
  //  $ride = node_load($ride);
  if (!$ride || $ride->type != 'rides')
    return "";
  $mail = $include_leaders ? nycc_get_all_leader_emails($ride) : "";
  if ($ride->field_ride_current_riders && is_array($ride->field_ride_current_riders)) {
    foreach($ride->field_ride_current_riders as $rider) {
      if (drupal_strlen($mail))
        $mail .= ",";
      $account = user_load($rider['uid']);
      $mail .= $account->mail;
    }
  }
  return $mail;
}

function nycc_get_all_waitlist_emails($ride) {
  //if ($ride > 0)
  //  $ride = node_load($ride);
  if (!$ride || $ride->type != 'rides')
    return "";
  $mail = "";
  if ($ride->field_ride_waitlist && is_array($ride->field_ride_waitlist)) {
    foreach($ride->field_ride_waitlist as $waiter) {
      if (drupal_strlen($mail))
        $mail .= ",";
      $account = user_load($waiter['uid']);
      $mail .= $account->mail;
    }
  }
  return $mail;
}

function nycc_speed2num($str) {
  $num = preg_match('/[0-9]+/', $str, $matches);
  return $num ? $matches[0] : 0;
}

function nycc_spots_remaining($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $no_of_spots = trim($ride->field_ride_spots[0]['value']);
  if (!$no_of_spots)
    return "Unlimited";
  $available_spots = $no_of_spots - nycc_count_riders($ride);
  $no_of_waiters = nycc_count_waiters($ride);
  if (!$available_spots && $no_of_waiters) {
    return  "$available_spots of $no_of_spots<br/>($no_of_waiters on waitlist)";
  }
  return "$available_spots of $no_of_spots";
}

function nycc_has_spots($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $no_of_riders = nycc_count_riders($ride);
  $no_of_spots = trim($ride->field_ride_spots[0]['value']);
  $available_spots = $no_of_spots - $no_of_riders;
  return (!$no_of_spots || ($available_spots > 0));
}

function nycc_get_ride_status($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if ($ride->field_ride_status && drupal_strlen($ride->field_ride_status[0]['value']))
    return $ride->field_ride_status[0]['value'];
  $sql = "SELECT field_ride_status_value FROM {content_type_rides} WHERE nid = %d AND vid =%d";
  $q = db_query($sql, $ride->nid, $ride->vid);
  $r = db_fetch_object($q);
  return $r->field_ride_status;
}

function nycc_get_ride_datetime($ride) {
  //if (!is_object($ride))
  //  return "";
  $d = $ride->field_date_ride_first[0]['value'];
  $h = $ride->field_ride_start_time_hour[0]['value'];
  $m = $ride->field_ride_start_time_min[0]['value'];
  $s = $ride->field_ride_start_time_select[0]['value'];
  if ($s == "PM")
    $h += 12;
  //dsm(nycc_get_date($d, "Y-m-d") ." ". $h .":". $m .":00");
  return nycc_get_date($d, "Y-m-d") ." ". $h .":". $m .":00";
}

// todo: change to limit to "within 4 hours" - DONE
// also: only for cue-sheet rides -- THIS IS NOW FOR ALL RIDES
function nycc_get_user_ride_counts($timestamp, $acct = null) {
  global $user;
  if (is_numeric($acct))
    $uid = $acct;
  if (is_null($acct))
    $uid = $user->uid;
  if (is_object($acct))
    $uid = $acct->uid;
  //$date = nycc_get_date($date, "Y-m-d");
  // removed from query:  AND R.field_ride_type_value = "Cue Sheet Ride"
  // mss - 2014-08-14: added max on vid to ensure no matches against older revisions
  $sql =<<<EOS
SELECT COUNT(*) AS cnt FROM content_field_ride_current_riders C, content_type_rides R WHERE C.nid = R.nid AND C.vid = R.vid AND R.field_ride_status_value = "Approved" AND C.field_ride_current_riders_uid = $uid AND R.vid = (SELECT MAX(N.vid) FROM node_revisions N WHERE N.nid = R.nid) AND
  UNIX_TIMESTAMP(CONCAT(
    DATE_FORMAT(R.field_date_ride_first_value, "%Y-%m-%d"),
    "T",
    If(R.field_ride_start_time_select_value = "AM", R.field_ride_start_time_hour_value, R.field_ride_start_time_hour_value+12),
    ":",
    R.field_ride_start_time_min_value,
    ":00"
  ))
  BETWEEN $timestamp - 60 * 60 * 4 AND $timestamp + 60 * 60 * 4;
EOS;
  //dsm($sql);
  $q = _db_query($sql); //, $uid, $timestamp, $timestamp);
  $r = db_fetch_object($q);
  //dsm($r->cnt);
  return $r ? $r->cnt : 0;
}

function nycc_output_similar_rides($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  $today = date('"Y-m-d"');
  $sql = "SELECT n.nid, n.title, r.field_date_ride_first_value AS date, r.field_ride_status_value AS status FROM {node} n, {content_type_rides} r WHERE n.nid = r.nid AND n.vid = r.vid AND n.type='rides' AND n.status <> 0 AND n.title = '%s' AND n.nid <> %d AND field_ride_status_value <> 'cancelled' AND field_date_ride_first_value > '%s' ORDER BY 3 DESC, 1 DESC";
  // and date in future?
  $output = "<div class='similar-rides'>";
  $output .= "<h2>" .t("Similar Rides") ."</h2>";
  $output .= "<ul>";
  $q = db_query($sql, $ride->title, $ride->nid, $today);
  while($row = db_fetch_array($q)) {
    $found = true;
    //$path = drupal_get_path_alias("node/". $row['nid']);
    $path = "node/". $row['nid'];
    $output .= "<li class='ride'><a target='_blank' title='View ride details...' href=\"/". $path ."\"> " . $row['title'] . "</a> - " . date("m/d/Y", strtotime($row['date'])) . " - ". substr($row['status'], 0, 1) ."</li>";
  }
  if (!$found)
    $output .= "<li class='no-rides'>" .t("No other rides found."). "</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

function nycc_get_date($dstr, $fmt = "Y-m-d") {
  if (!is_string($dstr))
    return false;
  $d = strtotime($dstr);
  if (!$d)
    return false;
  return date($fmt, $d);
}

function nycc_ride_exists($title, $date) {
  $date = nycc_get_date($date);
  $sql = "SELECT n.nid FROM {node} n, {content_type_rides} r WHERE n.nid = r.nid AND n.vid = r.vid AND n.type = 'rides' AND n.title = '%s' AND r.field_date_ride_first_value LIKE '%s%%'";
  $q = db_query($sql, $title, $date);
  if (db_fetch_array($q))
    return true;
  return false;
}

function nycc_ride_has_images($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $images = $node->field_ride_image;
  } else if (is_array($data))
    $images = $data;
  else if (is_object($data))
    $images = $data->field_ride_image;
  else
    return false;
  //dsm($data);
  if (is_array($images)) {
    foreach($images as $img){
      if (drupal_strlen($img['view']))
        return true;
    }
  }
  return false;
}

function nycc_ride_has_attachments($data) {
  if (is_numeric($data)) {
    $node = node_load(array("nid" => $data));
    $attachments = $node->field_ride_attachments;
  } else if (is_array($data))
    $attachments = $data;
  else if (is_object($data))
    $attachments = $data->field_ride_attachments;
  else
    return false;
  //dsm($data);
  if (is_array($attachments)) {
    foreach($attachments as $attachment){
      if (drupal_strlen($attachment['filename']))
        return true;
    }
  }
  return false;
}

// from http://drupal.org/node/829266
function nycc_wysiwyg_editor_settings_alter(&$settings, $context) {
  //CKEditor
  //dsm($context);
  if ($context['profile']->editor == 'ckeditor') {
    //if ($context['profile']->format != 5)    // 5 is the 'rides' filter
    //  return;
    //dsm($settings);
    //$settings['customConfig'] = base_path() . drupal_get_path('module', 'nycc') . '/ckeditor.config.js';
    //$settings['stylesCombo_stylesSet'] = 'my_styles:' . base_path() . drupal_get_path('module', 'nycc').'/ckeditor_styles.js';

    $type = "";
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2))
      $type = arg(2);
    else if (arg(0) == 'node' && arg(1) > 0 && arg(2) == 'edit') {
      $node = node_load(array('nid' => arg(1)));
      if ($node)
        $type = $node->type;
    }

    if ($type == 'rides') {
      $settings['width'] = '472px';
      $settings['height'] = 200;    // px, em (no % support for height)
    } else {
      /*$cartnum = count(uc_cart_get_contents());
      if ($cartnum > 0)
        $settings['width'] = '472px';
      else*/
        $settings['width'] = '920px';
      $settings['height'] = 400;    // px, em (no % support for height)
    }

    $settings['resize_enabled'] = true;
    //$settings['resize_dir'] = 'vertical';
    // $settings['resize_minWidth'] = 300;
    // $settings['resize_minHeight'] = 300;
    // $settings['resize_maxWidth'] = 800;
    // $settings['resize_maxHeight'] = 600;
    // $settings['removePlugins'] = 'resize';
    // $settings['toobar'] = 'basic';    // basic or full
    // $settings['uiColor'] = '#9ab8f3';
    // $settings['removePlugins'] = 'resize';
    // $settings['theme'] = 'default';
    // $settings['baseHref'] = 'resize';
    // $settings['language'] = 'en';
    // $settings['contentsCss'][0] = '/sites/all/themes/theme429/style.css';
    // $settings['format_tags'] = 'p;address;pre;h2;h3;h4;h5;h6;div';
    // $settings['toolbarLocation'] = 'top';
    // $settings['baseHref'] = 'http://dev.nycc.org';
    // $settings['skin'] = 'kama';
    // $settings['entities_latin'] = false;
    // $settings['entities_greek'] =false;

    // The layout we'd want to use if all buttons were enabled.
    // This example uses all buttons on one row, but separate them into groups that will wrap as one.
    // Multiple
    $toolbar = array(
      array( // Row
        array('Bold', 'Italic', 'Underline', 'Strike',), // Group
        array('JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock',),
        array('BulletedList', 'NumberedList',),
        array('Outdent', 'Indent',),
        array('Undo', 'Redo',),
        array('Link', 'Unlink', 'Anchor',),
        array('Superscript', 'Subscript',),
        array('Blockquote', 'Source', 'HorizontalRule',),
        array('Cut', 'Copy', 'Paste',),
        array('PasteText', 'PasteFromWord',),
        array('TextColor', 'BGColor', 'RemoveFormat',),
        array('Format', 'Font', 'FontSize', 'Styles',),
        array('ShowBlocks', 'SpecialChar',),
        array('SelectAll', 'Find', 'Replace',),
        array('Image', 'Flash', 'Smiley', 'Table', 'CreateDiv',),
        array('Maximize', 'SpellChecker', 'Scayt',),
      ),
    );

    // Use the original toobar definition as a lookup list.
    $original_toolbar = $settings['toolbar'][0];

    // Loop through rows.
    $r_key = 0;
    while ($r_key < count($toolbar)) {
      $row = &$toolbar[$r_key];

      // Loop through groups.
      $g_key = 0;
      while ($g_key < count($row)) {
        $group = &$row[$g_key];
        if (is_array($group)) { // This check isn't really needed for CKEditor.

          // Loop through buttons.
          $i_key = 0;
          while ($i_key < count($group)) {
            $item = &$group[$i_key];

            // Check if button was enabled.
            if (($found_key = array_search($item, $original_toolbar)) !== FALSE) {

              // Unset enabled button from original layout. Those left were possibly added by 3rd party plugins after our layout was created and need to be appended to the final toolbar so they won't just disappear.
              unset($original_toolbar[$found_key]);
            }
            else {

              //  Cut out disabled button from our custom toolbar layout.
              $cut =array_splice($toolbar[$r_key][$g_key], $i_key, 1);

              // Loop through the same button index again since the array was reindexed.
              $i_key -= 1;
            }
            $i_key += 1;
          }

          // Remove empty groups.
          if (count($group) == 0) {
            array_splice($toolbar[$r_key], $g_key, 1);

            // Loop through the same group index again since the array was reindexed.
            $g_key -= 1;
          }
        }
        $g_key += 1;
      }
      $r_key += 1;
    }

    // Any buttons left in the original toolbar were not in our custom layout, append them in a new group in the last row.
    if (count($original_toolbar) > 0) {
      $last_row = count($toolbar) -1;
      $extra_group = array();
      foreach ($original_toolbar as $item) {
        $extra_group[] = $item;
      }
      array_push($toolbar[$last_row], $extra_group);
    }

    // Add groups to a single array and delimit rows with slashes.
    $joined_toolbar = array();
    foreach ($toolbar as $row) {
      foreach($row as $grp){
        $joined_toolbar[] = $grp;
      }
      $joined_toolbar[] = '/';
    }

    // Remove the last empty row.
    array_pop($joined_toolbar);

    // Replace the old toolbar with our new shiny one.
    $settings['toolbar'] = $joined_toolbar;
  }
}

function nycc_get_membership_expiration_date($uid) {
  if (is_object($uid))
    $uid = $uid->uid;
  if (!($uid > 0))
    return $null;
  //$sql = "SELECT FROM_UNIXTIME(expiration) AS expdate FROM uc_roles_expirations WHERE uid=%d";
  //$sql = "SELECT expiration AS expdate FROM uc_roles_expirations WHERE uid=%d ORDER BY expiration DESC";
  $sql = "SELECT expiration as expdate FROM ms_memberships WHERE uid=%d AND (status=3 || status=4)  Order by expdate desc Limit 1";
  $q = db_query($sql, $uid);
  $row = db_fetch_array($q);
  if ($row)
    return $row['expdate'];
  return null;
}

function nycc_output_profile_item($label, $value, $classes="") {
  $classes = drupal_strlen($classes) ? "class='$classes'" : "";
  $output = "";
  if (drupal_strlen($label))
    $label = "<label>$label</label>";
  if (!drupal_strlen($label))
    $nolabel = " class='nycc-profile-item-no-label'";
  if (drupal_strlen($value))
    $output = "<div $classes>$label<span$nolabel>$value</span></div>";
  return $output;
}

function nycc_output_user_profile($account, $cp = null) {
  global $user;
  //dsm(array($account, $cp));
  if (is_numeric($account))
    $account = user_load(array("uid" => $account));
  if ($account) {
    if (!is_object($cp))
      $cp = content_profile_load('profile', $account->uid);

    if (in_array("board members", $account->roles)) {
      $output .= $cp->field_board_picture_1[0]['view'];
      $output .= nycc_output_profile_item("Title:", $cp->field_board_title[0]['value'] );
      $output .= nycc_output_profile_item("Bio:", $cp->field_board_bio[0]['value'] );
      $output .= nycc_output_profile_item("Board email:", $cp->field_board_email_address[0]['value'] );
    }

    $output .= nycc_output_profile_item("Riding style:", $cp->field_riding_style[0]['value'] );

    if (in_array("administer", $account->roles)) {
      $output .= nycc_output_profile_item("Age range:", $cp->field_age_range[0]['value'] );
      $output .= nycc_output_profile_item("Gender:", $cp->field_gender[0]['value'] );
    }

    $expdate = nycc_get_membership_expiration_date($account->uid);
/*
    // todo: make this visible to membership director role, etc
    if ($expdate && (($user->uid == $account->uid) || nycc_can_approve()))
      $output .= nycc_output_profile_item("Membership expiration date:", date('Y-m-d', $expdate));
    if (($expdate < (time() + (3 * 24 * 60 * 60))) && (($user->uid == $account->uid) || nycc_can_approve()))
      $output .= nycc_output_profile_item("", "<a href='/renew'><strong>Renew your membership</strong></a>");
*/

    if (in_array("administer", $account->roles)) {
      $output .= nycc_output_profile_item("Last waiver acknowledged:", $cp->field_waiver_last_date[0]['value'] );
      $output .= nycc_output_profile_item("Last profile review:", $cp->field_review_last_date[0]['value'] );
      $output .= nycc_output_profile_item("Imported registration date:", $cp->field_registration_date_import[0]['value'] );
    }
    if (in_array("administer", $account->roles) || in_array("ENY Director", $account->roles)) {
      $output .= nycc_output_profile_item("Last ENY year:", $cp->field_profile_last_eny_year[0]['value'] );
    }
    $output .= nycc_output_profile_item("Year joined:", $cp->field_date_joined[0]['value'] );
    $output .= nycc_output_profile_item("Site username:", $account->name );
    $output .= nycc_output_profile_item("Site registration date:", date('Y-m-d', $account->created) );

    if (($cp->field_publish_email_flag[0]['value'] != "false") || nycc_can_approve())
      $output .= nycc_output_profile_item("Email:", $account->mail);

    if (($cp->field_publish_phone_flag[0]['value'] != "false") || nycc_can_approve())
      $output .= nycc_output_profile_item("Phone:", $cp->field_phone[0]['value'] );

    if (($cp->field_publish_address_flag[0]['value'] != "false") || nycc_can_approve())
      $output .= nycc_output_profile_item("Address:", $cp->field_address[0]['value'] .", ". $cp->field_city[0]['value'] .", ". $cp->field_state[0]['value'] .", ". $cp->field_zip[0]['value'] .", ". $cp->field_country[0]['value']);

    // TODO: self or can approve or ride leader of a ride you are either a leader or rider
    if (($user->uid == $account->uid) || nycc_can_approve() || nycc_is_ride_leader($account, $cp)) {
      $output .= nycc_output_profile_item("Emergency contact name:", $cp->field_contact_name[0]['value'] );
      $output .= nycc_output_profile_item("Emergency contact phone:", $cp->field_emergency_contact_no[0]['value'] );
    }

  }

  if (in_array("administer", $account->roles)) {
    $roles = implode("<br/>", $account->roles);
    $roles = str_replace('authenticated user<br/>', '', $roles);
    $roles = str_replace('super user<br/>', '', $roles);
    $roles = str_replace('paid member', ' Paid member', $roles);
    $roles = str_replace('board members', 'Board member', $roles);
    $roles = str_replace('vp of rides', 'VP of rides', $roles);
    $roles = str_replace('administer', 'Administer', $roles);
    foreach ($cp->field_ride_coordinator as $item) {
      if (drupal_strlen($item['safe']))
        $roles = str_replace('ride coordinator', $item['safe'] .' coordinator', $roles);
    }
    $output .= $roles;
  }
  return $output;
}

function nycc_is_ride_leader($account = null, $cp = null) {
  global $user;
  if (!$account)
    $account = $user;
  else if (is_numeric($account))
    $account = user_load(array("uid" => $account));
  if (!is_object($cp))
    $cp = content_profile_load('profile', $account->uid);

  // todo: limit rides to future or today and approved rides

  // get array of ride id's that reference leader $cp->nid
  $ridesl = array();
  $sql = "SELECT l.nid FROM content_field_ride_leaders l WHERE field_ride_leaders_nid = %d";
  $q = db_query($sql, $cp->nid);
  while ($r = db_fetch_object($q)) {
    $ridesl[] = $r->nid;
  }
  // get array of ride id's that reference rider $user->uid (current user)
  $ridesr = array();
  $sql = "SELECT r.nid FROM content_field_ride_current_riders r WHERE field_ride_current_riders_uid = %d";
  $q = db_query($sql, $user->uid);
  while ($r = db_fetch_object($q)) {
    $ridesr[] = $r->nid;
  }
  return array_intersect($ridesr, $ridesl);
}

// todo: get last 'approved' revision
function nycc_get_last_revision_id($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!$ride)
    return null;
  $nrl = node_revision_list($ride);
  if (is_array($nrl) && count($nrl)) {
    array_shift($nrl);
    $o = array_shift($nrl);
    return $o->vid;
  }
  return null;
}

function nycc_last_approved_revision($ride) {
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (!$ride)
    return null;
  $nrl = node_revision_list($ride);
  if (is_array($nrl) && count($nrl)) {
    foreach ($nrl as $rev) {
      $revnode = node_load(array('nid' => $ride->nid), $rev->vid);
      if ($revnode && $revnode->field_ride_status[0]['value'] == 'Approved')
        return $revnode;
    }
  }
  return null;
}

function nycc_output_carousel() {
  //$sql = "SELECT n.nid, n.title, d.field_date_value, f.filename, nr.body FROM node n, node_revisions nr, content_field_date d, content_field_image_cache i, files f WHERE n.nid = d.nid AND n.vid = d.vid AND n.nid = nr.nid AND n.vid = nr.vid AND n.nid = i.nid AND n.vid = i.vid AND f.fid = i.field_image_cache_fid AND ((n.promote=1) AND ((n.type='event') OR (n.type='page')) AND (n.status <> 0)) ORDER BY field_date_value ASC LIMIT 4 ";

  $sql = "SELECT n.nid, n.title, d.field_date_value, f.filename, nr.body FROM node n, node_revisions nr, content_field_date d, content_field_image_cache i, files f, content_field_carousel_order co WHERE co.nid = n.nid AND co.vid = n.vid AND n.nid = d.nid AND n.vid = d.vid AND n.nid = nr.nid AND n.vid = nr.vid AND n.nid = i.nid AND n.vid = i.vid AND f.fid = i.field_image_cache_fid AND ((n.promote=1) AND ((n.type='event') OR (n.type='page')) AND (n.status <> 0)) ORDER BY field_carousel_order_value ASC, field_date_value ASC LIMIT 4 ";

  $items = array();
  $results = db_query($sql);

  $output .= "
  <div class='custom-top'>
    <div class='custom-indent'>
      <div id='gallery' class='content-gallery'>
        <div class='slideshow-container'>
          <div id='slideshow' class='slideshow'></div>
          <div id='caption' class='caption-container'></div>
        </div>
      </div>

      <div id='thumbs' class='navigation'>
        <ul class='thumbs noscript'>";

  while ( $data = db_fetch_object($results) ) {
    $body = strip_tags($data->body);
    if (strlen($body) >= 90)
      $body = substr($body,0,87) .'...';
    $imgpath = file_directory_path() ."/imagecache/home_page_top_banner/". $data->filename;
    $thumbpath = file_directory_path() ."/imagecache/home_page_top_thumbnail/". $data->filename;
    $nodepath = "/node/". $data->nid;
    $date = $data->field_date_value;
    $title = $data->title;
    $output .= "
          <li style='z-index:0'>
            <a class='thumb' name='leaf' href='$imgpath' title='$title'>
              <div class='thumb-content'>
                <p class='fleft'><img alt='thumbnail' src='$thumbpath' /></p>
                <div class='thumb-date'>$date</div>
                <p>$body</p>
              </div>
            </a>
            <div class='caption'>
              <h1>$title</h1>
              <a class='more' href='$nodepath'>Read More <span>&gt;&gt;</span></a>
              <p>$body</p>
            </div>
          </li>";
  }
  $output .= "
        </ul>
      </div>
    </div>
  </div>";
  return $output;
}




function nycc_ride_incentives(&$form_state) {

  // TODO: ensure that this works if no journal module
  nycc_turn_off_journal_form('nycc_ride_incentives');

  $form = array();

  $form['instructions'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="nycc-incentive-instructions">',
    '#value' => "Enter the incentive points associated with each ride type. These are used when generating <a href='/incentives'>incentives report</a>.",
    '#suffix' => '</div>',
  );

  $form['cuesheet'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Cue-sheet Rides"),
    '#default_value' => variable_get("nycc_ride_incentive_cuesheet","1"),
    '#size' => 10,
  );

  $form['training'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Training Rides"),
    '#default_value' => variable_get("nycc_ride_incentive_training","1"),
    '#size' => 10,
  );

  $form['other'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Other Rides"),
    '#default_value' => variable_get("nycc_ride_incentive_other","1"),
    '#size' => 10,
  );

  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#id' => 'nycc-update-incentives',
  );

  return $form;
}

// validate ?

function nycc_ride_incentives_submit($form, &$form_state) {
  variable_set("nycc_ride_incentive_cuesheet", $form_state['values']["cuesheet"]);
  variable_set("nycc_ride_incentive_training", $form_state['values']["training"]);
  variable_set("nycc_ride_incentive_other", $form_state['values']["other"]);
  drupal_set_message("Ride leader incentive values saved.");
}



function nycc_ride_incentives_report(&$form_state) {

  // TODO: ensure that this works if no journal module
  nycc_turn_off_journal_form('nycc_ride_incentives_report');

  $from = $_GET["from"];
  $to = $_GET["to"];
  $hasargs = drupal_strlen($to) * drupal_strlen($from);

  $form = array();

  $form['instructions'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="nycc-incentive-instructions">',
    '#value' => "1. Enter the incentive points associated with each ride type.",
    '#suffix' => '</div>',
  );

  $form['cuesheet'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Cue-sheet Rides"),
    '#default_value' => variable_get("nycc_ride_incentive_cuesheet","1"),
    '#size' => 10,
  );

  $form['training'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Training Rides"),
    '#default_value' => variable_get("nycc_ride_incentive_training","1"),
    '#size' => 10,
  );

  $form['other'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Other Rides"),
    '#default_value' => variable_get("nycc_ride_incentive_other","1"),
    '#size' => 10,
  );

  $form['instructions2'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="nycc-incentives-report-instructions">',
    '#value' => "2. Enter the start and end dates for the report.",
    '#suffix' => '</div>',
  );

  $form['from'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("Start date"),
    '#description' => "Format is ". date("Y/m/d"),
    '#default_value' => $hasargs ? $from : date("Y")."/01/01",
    '#size' => 20,
  );

  $form['to'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t("End date"),
    '#description' => "Format is ". date("Y/m/d"),
    '#default_value' => $hasargs ? $to : date("Y")."/12/31",
    '#size' => 20,
  );

  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('3. Calculate Incentives'),
    '#id' => 'nycc-update-incentives-report',
  );

  $output = "";
  if ($hasargs) {
    $found = false;
    $incentives['Cue Sheet Ride'] = variable_get("nycc_ride_incentive_cuesheet",1);
    $incentives['Training Ride'] = variable_get("nycc_ride_incentive_training",1);
    $incentives['Other'] = variable_get("nycc_ride_incentive_other",1);

    $output .= "<ul>";

    $sql =<<<EOS
SELECT CONCAT(P.field_last_name_value, ", ", P.field_first_name_value) AS "name", IFNULL(R.field_ride_type_value, "Other") AS "type" FROM content_type_rides R, content_field_ride_leaders L, content_type_profile P WHERE L.nid = R.nid AND L.vid = R.vid AND L.field_ride_leaders_nid = P.nid AND LEFT(R.field_date_ride_first_value,10) BETWEEN %d AND %d AND R.field_ride_status_value = "Approved" ORDER BY 1
EOS;

    $q = db_query($sql, $from, $to);
    while($row = db_fetch_array($q)) {
      $found = true;
      $stats[$row['name']]['value'] += $incentives[$row['type']];
    }

    if (!$found)
      $output .= "<li class='no-incentives'>" .t("No rides found for these dates."). "</li>";
    else {
      foreach ($stats as $name => $value) {
        $output .= "<li style='list-style:none;' class='incentive'>\"". $name ."\",". $value['value'] ."</li>";
      }
    }
    $output .= "</ul>";
 }

  $form['report'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="nycc-incentives-report-output">',
    '#value' => $output,
    '#suffix' => '</div>',
  );

  return $form;
}

function nycc_ride_incentives_report_submit($form, &$form_state) {
  variable_set("nycc_ride_incentive_cuesheet", $form_state['values']["cuesheet"]);
  variable_set("nycc_ride_incentive_training", $form_state['values']["training"]);
  variable_set("nycc_ride_incentive_other", $form_state['values']["other"]);
  drupal_goto("reports/rides/incentives", array("to" => $form_state['values']['to'], "from" => $form_state['values']['from']));
}

function nycc_group_notes(&$form_state, $node) {
  if (is_numeric(arg(3)))
    $group = node_load(array('nid' => arg(3)));

  if (is_numeric(arg(4)))
    $acct = user_load(array('uid' => arg(4)));
  else
    $acct = user_load(array('name' => arg(4)));
  $cp = content_profile_load('profile', $acct->uid);

  // TODO: handle errors with node or user load, check node is a group
  // NOT WORKING - FIX
  // check access: group captain or admin
  //if (!nycc_is_captain($group) && !nycc_can_approve()) {
  //  drupal_access_denied();
  //  module_invoke_all('exit');
  //  exit();
  // }

  // TODO: ensure that this works if no journal module
  nycc_turn_off_journal_form('nycc_group_notes');

  $form['groupname'] = array(
    '#type' => 'markup',
    '#value' => 'Group: '. $group->title,
    '#prefix' => '<div class="nycc-group-notes-groupname">',
    '#suffix' => '</div>',
  );

  $form['username'] = array(
    '#type' => 'markup',
    '#value' => 'Rider: <a href="/users/' . $acct->name . '">'. $cp->field_first_name[0]['value'] . ' ' . $cp->field_last_name[0]['value'] . '</a>',
    '#prefix' => '<div class="nycc-group-notes-username">',
    '#suffix' => '</div>',
  );

  $sql = "SELECT nid, notes, score FROM nycc_ride_notes WHERE gid = %d AND uid = %d";

  $s = "";
  $q = db_query($sql, $group->nid, $acct->uid);
  while($r = db_fetch_object($q)) {
    //dsm($r);
    $ride = node_load($r->nid);
    $s .= "<hr/>";
    $s .= "ride: <a href='/node/". $r->nid ."'>". $ride->title . '</a>';
    $s .= "<br/>";
    $s .= "date: ". substr($ride->field_date_ride_first[0]['value'], 0, 10);
    $s .= "<br/>";
    $s .= "notes: ". $r->notes;
    $s .= "<br/>";
    $s .= "score: ". $r->score;
    $s .= "<br/>";
  }

  if (!drupal_strlen($s))
    $s = "No notes for this user yet.";

  $form['ridenotes'] = array(
    '#type' => 'markup',
    '#value' => $s,
    '#prefix' => '<div class="nycc-group-notes-all">',
    '#suffix' => '</div>',
    '#rows' => 8,
  );

  return $form;
}


function nycc_ride_attend(&$form_state, $node) {
  if (is_numeric($node))
    $node = node_load(array('nid' => $node));


  // TODO: ensure that this works if no journal module
  nycc_turn_off_journal_form('nycc_ride_attend');

  $can_modify = nycc_can_modify_ride($node);

  // WARNING: do not save node unless next line replaced with safe gid calculation
  $gps = $node->og_groups;
  $groupid = count($gps) ? array_shift($gps) : 0;
  // TODO: restrict to leaders, group admins, vpor, ride coordinator, administer
  if (!$can_modify /*&& !nycc_is_rider($node)*/) {
    $form['error'] = array(
      '#type' => 'markup',
      '#value' => $groupid ? "This information is restricted to ride leaders, captains and administrators." : "This information is restricted to ride leaders, participants and administrators.",
    );
    return $form;
  }

  if ($node->type != 'rides') {
    $form['error'] = array(
      '#type' => 'markup',
      '#value' => "This is not a ride!",
    );
    return $form;
  }

  $numriders = nycc_count_riders($node);
  if (!$numriders) {
    $form['error'] = array(
      '#type' => 'markup',
      '#value' => "There are no riders or this is not a ride!",
    );
    return $form;
  }

  $form['nid'] = array(
    '#value' => $node->nid,
    '#type' => 'hidden',
    '#name' => 'nid',
  );

  $form['date'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="nycc-attendance-date">',
    '#value' => substr($node->field_date_ride_first[0]['value'], 0, 10) ." ". $node->field_ride_start_time_hour[0]['value'] .":". $node->field_ride_start_time_min[0]['value'] ." ". $node->field_ride_start_time_select[0]['value'],
    '#suffix' => '</div>',
  );

  $form['from'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="nycc-attendance-from">',
    '#value' => $node->field_ride_from[0]['value'] . $node->field_ride_from_select[0]['value'],
    '#suffix' => '</div>',
  );

  if ($can_modify) {
    $form['instructions'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="nycc-attendance-instructions">',
      '#value' => $groupid ? "Check each member that attended this ride, add notes, scores and press 'Update'." : "Check each member that attended this ride and press 'Update'.",
      '#suffix' => '</div>',
    );

    $form['toggle'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="nycc-attendance-toggle">',
      '#value' => "<a href='#' title='Toggle all checkboxes on/off...'>Toggle all checkboxes on/off</a>",
      '#suffix' => '</div>',
    );
  }

  // load $notes array, indexed by user ids
  $notes = array();
  $scores = array();
  $sql = "SELECT uid, notes, score FROM {nycc_ride_notes} WHERE nid = %d";
  $q = db_query($sql, $node->nid);
  while($r = db_fetch_object($q)) {
    $notes[$r->uid] = $r->notes;
    $scores[$r->uid] = $r->score;
  }

  foreach ($node->field_ride_current_riders as $rider) {
    $rider_user = user_load(array('uid' => $rider['uid']));
    $profile_node = content_profile_load('profile', $rider['uid']);
    $form['hr-'. $rider['uid']] = array(
      '#type' => 'markup',
      '#value' => '<hr/>',
    );
    $form['uid-'. $rider['uid']] = array(
      '#type' => 'checkbox',
      '#attributes' => array('class' => 'attendance'),
      '#title' => '<strong>' . $profile_node->title . "</strong> (". $rider_user->mail .")",
      '#disabled' => !$can_modify,
    );
    // only show score and notes for group rides
    if ($groupid) {
      $form['score-'. $rider['uid']] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => 'score'),
        '#title' => 'Score',
        '#value' => $scores[$rider['uid']],
        '#disabled' => !$can_modify,
        '#description' => 'Max 32 characters.',
        '#maxlength' => 32,
        '#size' => 32,
      );
      $form['notes-'. $rider['uid']] = array(
        '#type' => 'textarea',
        '#attributes' => array('class' => 'notes'),
        '#title' => 'Notes',
        '#value' => $notes[$rider['uid']],
        '#disabled' => !$can_modify,
      );
    } else {
      $form['score-'. $rider['uid']] = array(
        '#type' => 'hidden',
        '#value' => "",
      );
      $form['notes-'. $rider['uid']] = array(
        '#type' => 'hidden',
        '#value' => "",
      );
    }  // $groupid
  }

  foreach ($node->field_ride_attendees as $attendee) {
    if ($attendee['uid'])
      $form['uid-'. $attendee['uid']]['#default_value'] = true;
  }

  // todo: check for particpants, ride status, etc - do this for button/link display too

  // todo: consider access. who can view and who can edit?
  // todo: consider: view only version, checkboxes disabled and no save button or disabled, extra message as to why

  // todo: output descriptive text: date/time, location, speed, etc.

  // wishlist: show user icons/pictures
  // wishlist: show link for user contact

  if ($can_modify) {
    $form['button'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
      //'#attributes' => array('class' => 'hide'),
      '#id' => 'nycc-update-attendance',
    );
  }

  $form['cancel'] = array(
    '#type' => 'markup',
    //'#prefix' => '<div class="nycc-attendance-cancel">',
    '#value' => "<a href='/node/". $node->nid ."' title='Return to ride page...'>$msg</a>",
    //'#suffix' => '</div>',
  );

  drupal_set_title("Ride Attendance for ". $node->title);

  $msg = $can_modify ? "Cancel changes, return to ride page" : "Return to ride page";
  return $form;
}

function nycc_ride_attend_submit($form, &$form_state) {
  //dpm($form['#post']);
  //dpm(get_defined_vars());
  $node = node_load(array('nid' => arg(1)));
  if ($node) {
    // BUG: node is resaved
    $gps = $node->og_groups;
    $groupid = count($gps) ? array_shift($gps) : NULL;

    unset($node->field_ride_attendees);
    $node->field_ride_attendees = array();
    //foreach ($form_state['values'] as $ndx => $value) {
    //  list($prefix, $uid) = explode("-", $ndx);
    //}
    $scores = array();
    foreach ($form['#post'] as $ndx => $value) {
      list($prefix, $uid) = explode("-", $ndx);
      if (($prefix == 'uid') && $uid && ($value==1))
        $node->field_ride_attendees[] = array('uid' => $uid);
      if (($prefix == 'score') && $uid)
        $scores[$uid] = $value;
    }
    //dpm(array($scores));
    foreach ($form['#post'] as $ndx => $value) {
      list($prefix, $uid) = explode("-", $ndx);
      $value = trim($value);
      if (($prefix == 'notes') && $uid) {
        //$sql = "REPLACE INTO {nycc_ride_notes} (uid, nid, notes) VALUES (%d, %d, '%s')";
        //$q = db_query($sql, $uid, $node->nid, $value);
        if (db_result(db_query('SELECT 1 FROM {nycc_ride_notes} WHERE uid = %d AND nid = %d', $uid, $node->nid))) {
          if (drupal_strlen($value) || drupal_strlen($scores[$uid])) {
            $sql = "UPDATE {nycc_ride_notes} SET notes = '%s', score = '%s', gid = %d WHERE uid = %d AND nid = %d";
            $q = db_query($sql, $value, $scores[$uid], $groupid, $uid, $node->nid);
          } else {
            $sql = "DELETE FROM {nycc_ride_notes} WHERE uid = %d AND nid = %d";
            $q = db_query($sql, $uid, $node->nid);
          }
        } else {
          if (drupal_strlen($value) || drupal_strlen($scores[$uid])) {
            $sql = "INSERT INTO {nycc_ride_notes} (uid, nid, gid, notes, score) VALUES (%d, %d, %d, '%s', '%s')";
            $q = db_query($sql, $uid, $node->nid, $groupid, $value, $scores[$uid]);
          }
        }
      }
    }
    $node->field_ride_additional_dates[0]['value'] = "";
    if (!count($node->field_ride_attendees))
      $node->field_ride_attendees[0] = NULL;
    if (!isset($node->field_ride_waitlist))
      $node->field_ride_waitlist = array(0 => NULL);
    //dpm($node->field_ride_waitlist);
    node_save($node);
    drupal_set_message("Ride attendance and notes updated.");
  }
}

// to do: check node type = rides
function nycc_ride_cancel_confirm(&$form_state, $node) {
  if (is_numeric($node))
    $node = node_load(array('nid' => $node));

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  return confirm_form($form,
    t('Are you sure you want to cancel %title?', array('%title' => $node->title)),
    isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $node->nid .'/edit',
    //t('This action cannot be undone.'),
    t("This action will cause email notifications to be sent to all particpants, leaders and ride coordinators"),
    t('Yes, cancel this ride'),
    t('No, return to edit form')
  );
}

function nycc_ride_cancel_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $ride = node_load(array('nid' => $form_state['values']['nid']));
    nycc_update_ride_status($ride, 'Cancelled');
    drupal_set_message('Ride '. $ride->title .' cancelled');
  }
  $form_state['redirect'] = 'node/'. $form_state['values']['nid'];
}

function nycc_access($op, $node, $account = NULL) {
  global $user;

  if (!$node || !in_array($op, array('cancel'), TRUE)) {
    // If there was no node to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // // Convert the node to an object if necessary:
  // if ($op != 'create') {
  //   $node = (object)$node;
  // }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $user;
  }

  //if (user_access('administer nodes', $account)) {
    return TRUE;
  //}

  //return FALSE;
}


function nycc_get_ride_coordinator_emails($data) {
  if (is_numeric($data)) {
    $ride = node_load(array('nid' => $data));
    if ($ride)
      $level = $ride->field_ride_level_select[0]['value'];
  } else if (is_string($data) && strlen($data) == 1 && in_array(strtolower($data), array('a', 'b', 'c'))) {
    $level = $data;
  }
  else if (is_object($data) && $data->type && ($data->type == 'rides')) {
    $level = $data->field_ride_level_select[0]['value'];
  } else {
    return "";
  }

  $sql = "SELECT u.mail FROM users u, content_type_profile cp, node np, content_field_ride_coordinator cfc WHERE np.uid = u.uid AND np.nid = cp.nid AND np.vid = cp.vid AND cfc.nid = np.nid AND cfc.vid = np.vid AND cfc.field_ride_coordinator_value = '%s'";

  $q = db_query($sql, $level);
  while($r = db_fetch_object($q)) {
    if (drupal_strlen($mail))
      $mail .= ",";
    $mail .= $r->mail;
  }
  return $mail;
}

function nycc_get_ride_coordinator_names($data) {
  if (is_numeric($data)) {
    $ride = node_load(array('nid' => $data));
    if ($ride)
      $level = $ride->field_ride_level_select[0]['value'];
  } else if (strlen($data) == 1 && in_array(strtolower($data), array('a', 'b', 'c'))) {
    $level = $data;
  }
  else if (is_object($data) && $data->type && ($data->type == 'rides')) {
    $level = $data->field_ride_level_select[0]['value'];
  } else {
    return "";
  }

  $sql = "SELECT cp.title FROM content_type_profile cp, node np, content_field_ride_coordinator cfc WHERE np.nid = cp.nid AND np.vid = cp.vid AND cfc.nid = np.nid AND cfc.vid = np.vid AND cfc.field_ride_coordinator_value = '%s'";

  $q = db_query($sql, $level);
  while($r = db_fetch_object($q)) {
    if (drupal_strlen($names))
      $names .= ", ";
    $names .= $r->title;
  }

  return $names;
}

  /*
function nycc_views_pre_view (&$view, &$display_id, &$args) {
  global $user;
  if ($view->name == "og_ghp_front_page") {
    //dpm($view);
    $roles = array_values($user->roles);
    $gid = $args[0];
    $gpadmin = $gid && key_exists($gid, $user->og_groups) && ($user->og_groups[$gid]['is_admin'] == 1);
    $ok = in_array('administer', $roles) || in_array('vp of rides', $roles) || $gpadmin;
    if ($ok) {
      // filter gp capts posts from non admins
      // $view->display[$display_id]->display_options['filters']['type']['value']['gpcaptspost'] = 'gpcaptspost';
      if (key_exists('gpcaptspost', $view->display[$display_id]->display_options['filters']['type']['value'])) {
        unset($view->display[$display_id]->display_options['filters']['type']['value']['gpcaptspost']);
        dpm($view->display[$display_id]->display_options['filters']['type']['value']);
      }
    }
    //dsm(array($view, $display_id, $args, $ok, $view->display[$display_id]->display_options['filters']['type']['value']));
  } // og_ghp_front_page
}
  */


/*
function nycc_views_pre_build (&$view) {
  global $user;
  if ($view->name == "og_ghp_front_page") {
    //dpm($view);
    $roles = array_values($user->roles);
    $gid = $view->args[0];
    $gpadmin = $gid && key_exists($gid, $user->og_groups) && ($user->og_groups[$gid]['is_admin'] == 1);
    $ok = in_array('administer', $roles) || in_array('vp of rides', $roles) || $gpadmin;
    //dpm($view->display[$view->current_display]->display_options['filters']['type']['value']);
    if ($ok) {
      // filter gp capts posts from non admins
      if (key_exists('gpcaptspost', $view->display[$view->current_display]->display_options['filters']['type']['value'])) {
        unset($view->display[$view->current_display]->display_options['filters']['type']['value']['gpcaptspost']);
      }
    }
    //dpm(array($view, $ok, $gid, $view->display[$view->current_display]->display_options['filters']['type']['value']));
  } // og_ghp_front_page
}
*/

function nycc_views_query_alter (&$view, &$query) {
  global $user;
  if ($view->name == "og_ghp_front_page") {
    //dpm($view);
    //dpm($query);
    $roles = array_values($user->roles);
    $gid = $view->args[0];
    $gpadmin = $gid && key_exists($gid, $user->og_groups) && ($user->og_groups[$gid]['is_admin'] == 1);
    $ok = in_array('administer', $roles) || in_array('vp of rides', $roles) || $gpadmin;
    if ($ok) {
      // filter gp capts posts from non admins group front page
      foreach ($query->where[0]['args'] as $ndx => $warg) {
        if ($warg == 'gpcaptspost')
          $query->where[0]['args'][$ndx] = "";
      }
    }
  } // og_ghp_front_page
}


function nycc_views_pre_execute (&$view) {
  global $user;
  if ($view->name == "og_ghp_front_page") {
    //dsm($view);
  } // og_ghp_front_page
}

// function nycc_views_pre_render (&$view) {
//   //dsm($view);
// }


// function nycc_views_post_render (&$view) {
//   //dsm($view);
// }


function nycc_approve_rides() {
  global $user;
  $output = "Access denied";
  $title = "Approve Rides";
  $profile_node = content_profile_load('profile', $user->uid );
  if(isset($profile_node->field_ride_coordinator[0]['value'])) {
    $level = substr($profile_node->field_ride_coordinator[0]['value'], 0, 1);
    $title = "Approve $level-Rides";
    $output = views_embed_view('roster_of_rides', 'page_1', $level);
  }
  else if (in_array("vp of rides", $user->roles) || in_array("administer", $user->roles) ) {
    $output = views_embed_view('roster_of_rides', 'page_2');
  }
  drupal_set_title($title);
  return $output;
}

// function nycc_menu_alter(&$items) {
//   //var_dump($items);
// }

function nycc_join_ride_form($ride) {
  $rid = is_object($ride) ? $ride->nid : $ride;
  $form = array(
    //'#action' => 'nycc-join-ride',
  );
  $form['nid'] = array(
    '#value' => $rid,
    '#type' => 'hidden',
    '#name' => 'nid',
  );
  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Join this ride or waiting list'),
    '#attributes' => array('class' => 'hide'),
    '#id' => 'nycc-join-ride',
  );
  return "<form method='post' action='/nycc-join-ride/$rid'>". drupal_render($form) ."</form>";
}

function nycc_withdraw_from_ride_form($ride) {
  $rid = is_object($ride) ? $ride->nid : $ride;
  $form = array(
    //'#action' => 'nycc-withdraw-from-ride',
  );
  $form['nid'] = array(
    '#value' => $rid,
    '#type' => 'hidden',
    '#name' => 'nid',
  );
  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Withdraw from this ride or waiting list'),
    '#attributes' => array('class' => 'hide'),
    '#id' => 'nycc-withdraw-from-ride',
  );
  return "<form method='post' action='/nycc-withdraw-from-ride/$rid'>". drupal_render($form) ."</form>";
}

function nycc_review_membership() {
  global $user;
  $form = array();

  if ($user->uid) {
    nycc_turn_off_journal_form('nycc_review_membership');

    $cp = content_profile_load('profile', $user->uid);

    $form['#redirect'] = "<front>";

    $descnode = variable_get('nycc_review_membership_header_node', 0);
    if (!$descnode)
      $descnode = nycc_create_review_membership_header_node();
    if ($descnode > 0)
      $descnode = node_load(array('nid' => $descnode));
    if (is_object($descnode)) {
      $description = $descnode->body;
      if ( in_array("administer", $user->roles) || ($user->uid == 1) ) {
        $nid = $descnode->nid;
        $description .= " <small><a href='/node/$nid/edit?destination=nycc-review-membership' title='Admins can edit this header text.'>edit header text (admins only)</a></small>";
      }
    } else {
      $description = nycc_default_review_membership_header();
      variable_del('nycc_review_membership_header_node');
    }
    $form['description'] = array(
      '#prefix' => '<div>',
      '#value' => $description,
      //'#value' => t("Please review your contact information and acknowledge your agreement with the NYCC Release and Waiver of Liability, Assumption of Risk, and Indemnity Agreement."),
      '#suffix' => '</div>',
    );

    $form['first_name'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("First Name"),
      '#default_value' => $cp->field_first_name[0]['value'],
    );
    $form['last_name'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Last Name"),
      '#default_value' => $cp->field_last_name[0]['value'],
    );

    $form['mail'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Email"),
      '#default_value' => $user->mail,
    );
    $form['phone'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Phone"),
      '#default_value' => $cp->field_phone[0]['value'],
    );

    $form['contact_name'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Emergency Contact Name"),
      '#default_value' => $cp->field_contact_name[0]['value'],
    );
    $form['emergency_contact_no'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Emergency Contact Number"),
      '#default_value' => $cp->field_emergency_contact_no[0]['value'],
    );

    $form['address'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Address"),
      '#default_value' => $cp->field_address[0]['value'],
    );
    $form['city'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("City"),
      '#default_value' => $cp->field_city[0]['value'],
    );
    $form['state'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("State"),
      '#default_value' => $cp->field_state[0]['value'],
    );
    $form['zip'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Zip"),
      '#default_value' => $cp->field_zip[0]['value'],
    );
    $form['country'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Country"),
      '#default_value' => $cp->field_country[0]['value'],
    );



    $wdate = $cp->field_waiver_last_date[0]['value'];
    if (drupal_strlen($wdate))
      $sdate = t("Aggrement last acknowleged on %date.", array('%date' => $wdate));
    else
      $sdate = t("This account has no prior agreement date recorded.");
    $form['waiver'] = array(
      '#type' => 'checkbox',
      '#required' => true,
      '#title' => t("NYCC Release and Waiver of Liability, Assumption of Risk, and Indemnity Agreement"),
      '#description' => t("Check the box above to indicate your agreement with the <a href='/node/45438' target='_blank' title='View waiver in another tab or window...'>Release and Waiver of Liability, Assumption of Risk, and Indemnity Agreement</a>. $sdate"),
    );
    $form['button'] = array(
      '#type' => 'submit',
      '#value' => t('Update Your Profile'),
    );

    // $form['summary'] = array(
    //   '#prefix' => '<small>',
    //   '#suffix' => '</small>',
    // );
    // $expdate = nycc_get_membership_expiration_date($user->uid);
    // if (drupal_strlen($expdate))
    //   $sdate = t("This membership expires on %date", array('%date' => $expdate));
    // else
    //   $sdate = t("This account has no associated expiration date.");
    // $form['summary']['expiration'] = array(
    //   '#prefix' => '<div>',
    //   '#value' => $sdate,
    //   '#suffix' => '</div>',
    // );

    drupal_set_title(t("Review NYCC Profile Information for %mail", array('%mail' => $user->mail, '%account' => $user->name)));

  }  else {
    drupal_set_message("Please login.");
    // TODO: can we save original distination?
    // alternative: show login form and include destinatation in #redirect?
    drupal_goto("user");
    //$form = user_login($form_state);
    //$form['#redirect'] = "nycc-review-membership?destination=$destination";
  }

  return $form;
}

function nycc_review_membership_submit($form, $form_state) {
  global $user;
  $user->mail = $form_state['values']['mail'];
  user_save($user);
  //dsm($form_state);
  $cp = content_profile_load('profile', $user->uid);
  if (!$cp) {
    watchdog("nycc_review_membership_submit", "No content profile found. Creating one.", array(), WATCHDOG_INFO);
    $cp = new stdClass();
    $cp->type = 'profile';
    $cp->uid = $user->uid;
    $cp->status = 1;
    $cp->field_terms_of_use[0]['value'] = "I agree";
    // assume $node->title handled by autotitle module
    // same for $node->name
    node_save($cp);
    //$cp = content_profile_load('profile', $user->uid);
    watchdog("nycc_review_membership_submit", "Profile created.", array(), WATCHDOG_INFO);
  }
  if ($cp) {
    $cp->field_review_last_date[0]['value'] = date('Y-m-d');
    $cp->field_waiver_last_date[0]['value'] = date('Y-m-d');
    $cp->field_first_name[0]['value'] = $form_state['values']['first_name'];
    $cp->field_last_name[0]['value'] = $form_state['values']['last_name'];
    $cp->field_contact_name[0]['value'] = $form_state['values']['contact_name'];
    $cp->field_emergency_contact_no[0]['value'] = $form_state['values']['emergency_contact_no'];
    $cp->field_phone[0]['value'] = $form_state['values']['phone'];
    $cp->field_address[0]['value'] = $form_state['values']['address'];
    $cp->field_city[0]['value'] = $form_state['values']['city'];
    $cp->field_state[0]['value'] = $form_state['values']['state'];
    $cp->field_zip[0]['value'] = $form_state['values']['zip'];
    $cp->field_country[0]['value'] = $form_state['values']['country'];
    node_save($cp);
    watchdog("nycc_review_membership_submit", "Profile updated.", array(), WATCHDOG_INFO);
  }
  else {
    watchdog("nycc_review_membership_submit", "No content profile created.", array(), WATCHDOG_INFO);
  }
  drupal_set_message("Your profile information has been updated. Thank you.");
}

function nycc_has_valid_review_date() {
  global $user;
  if ($user->uid) {
    $cp = content_profile_load('profile', $user->uid);
    if ($cp) {
      $wdate = $cp->field_waiver_last_date[0]['value'];
      $rdate = $cp->field_review_last_date[0]['value'];
      if (drupal_strlen($wdate))
        $wdiff = time() - strtotime($wdate);
      if (drupal_strlen($rdate))
        $rdiff = time() - strtotime($rdate);
      $oneyear = 365 * 24 * 60 * 60;
      if (drupal_strlen($wdate) && ($wdiff < $oneyear) && drupal_strlen($rdate) && ($rdiff < $oneyear))
        return true;
    }
  }
  return false;
}

function nycc_should_redirect_to_membership_review() {
  global $user;
  if (!$user->uid || !in_array("paid member", $user->roles) || arg(0) == 'user')
    return false;
  if ( (arg(0) == 'node') && ( (arg(1) == '2') || (arg(1) == '27725') || (arg(1) == '45438') ) )
    return false;  // about, contact pages and waiver
  if ( (arg(0) == 'admin') || (arg(0) == 'nycc-review-membership') || (arg(0) == "logout") )
    return false;  // avoid infinite loop redirect and allow admin pages and sign out
  if ( nycc_has_required_profile_info() && nycc_has_valid_review_date() )
    return false;
  return true;
}

function nycc_init() {
  if (nycc_should_redirect_to_membership_review()) {
    drupal_set_message("Before proceeding, please review your profile information and verify your agreement with the NYCC liability waiver.", 'status', FALSE);
    // TODO: set destination?
    drupal_goto("nycc-review-membership");
  }
}

function nycc_turn_off_journal_form($form_id = "unknown") {
  $journal_form_ids = variable_get('journal_form_ids', array());
  if (!array_key_exists($form_id, $journal_form_ids)) {
    $journal_form_ids[$form_id] = 0;
    variable_set('journal_form_ids', $journal_form_ids);
  }
}

function nycc_create_review_membership_header_node() {
  $node = new stdClass();
  $node->type = 'page';
  $node->title = "Membership Review Header";
  $node->uid = 1;
  $node->body = nycc_default_review_membership_header();
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1;
  $node->promote = 0;
  $node->field_date[0]['value'] = date("m/d/Y h:i");
  node_save($node);
  variable_set("nycc_review_membership_header_node", $node->nid);
  return $node->nid;
}

function nycc_default_review_membership_header() {
  return "Please review your contact information and acknowledge your agreement with the NYCC Release and Waiver of Liability, Assumption of Risk, and Indemnity Agreement.";
}

function nycc_ride_reminder($timestamp) {
  $rrp = variable_get(nycc_ride_reminder_period, 48);
  $rrps = $rrp * 60 * 60;
  $r1 = $timestamp + $rrps;
  $r2 = $r1 + 60 * 60 - 1;
  // TODO: check for send ride reminders on ride
  // query for all approved rides whose start date and time is during rrp from timestamp
  $sql =<<<EOS
SELECT N.nid as nid FROM node N, content_type_rides R WHERE N.nid = R.nid AND N.vid = R.vid AND R.field_ride_status_value = "Approved" AND N.type = "rides" AND
  UNIX_TIMESTAMP(CONCAT(
    DATE_FORMAT(R.field_date_ride_first_value, "%Y-%m-%%d"),
    "T",
    If(R.field_ride_start_time_select_value = "AM", R.field_ride_start_time_hour_value, IF(R.field_ride_start_time_hour_value < 12, R.field_ride_start_time_hour_value+12, R.field_ride_start_time_hour_value-12)),
    ":",
    R.field_ride_start_time_min_value,
    ":00"
  ))
  BETWEEN $r1 AND $r2;
EOS;
  //print "<br/><br/>";
  //var_dump(db_prefix_tables($sql));
  $q = db_query($sql);
  //watchdog("ride-reminders", str_replace(array("{","}"),"",$sql));
  //print "<br/><br/>";
  //var_dump($sql);
  //print "<br/><br/>";
  //var_dump($q);
  //print "<br/><br/>";
  //$rfound = false;
  while ($row = db_fetch_object($q)) {
    $ride = node_load(array('nid' => $row->nid));
    //$rfound = true;
    watchdog("ride reminders", date("H:i:s") ." - <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
    if ($ride) {
      $current_riders = $ride->field_ride_current_riders;
      //$rfound2 = false;
      foreach($current_riders as $val) {
        //$rfound2 = true;
        //watchdog("ride reminders", "rider found: ". var_export($val, 1));
        $acct = user_load($val['uid']);
        if ($acct) {
          $cp = content_profile_load('profile', $acct->uid);
          if ($cp) {
            if ($cp->field_ride_reminders[0]['value'] != "false") {
              $context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct /*, 'profile'=> $cp*/);
              actions_do(2, $acct, $context);     // 2 is the email action for ride reminders
              watchdog("ride reminders", $acct->mail ." sent a reminder for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
            }
          }  // cp
        } // acct
      }  // for
      //if (!$rfound2)
        //watchdog("ride reminders", "no riders found");
      // mark ride as notified (todo: add cck field for this and add to query)
    }  // ride
  }  // while
  //var_dump($row);
  //if (!$rfound)
  //  watchdog("ride reminders", "no rides found");
}

function nycc_ride_reminders_test($timestr) {
//  if (($timestr > 0) || ($timestr < 0))
//    $timestr .= " day";
  $t = strtotime($timestr);
  if (!$t)
    $t = time();
  nycc_ride_reminder($t);
  print "$timestr = $t done! check the watchdog log - current time is ". time();
}

function nycc_cron() {
  //watchdog('cron', 'starting nycc_cron');
  nycc_ride_reminder(time());
  nycc_ride_overlaps_reminder();
  nycc_ride_roster_email(time(), 1);
  
  //watchdog('cron', 'finished nycc_cron');  
}

function nycc_ride_overlaps_reminder() {
  $now = time();
  $lastcron = variable_get("nycc_last_ride_overlaps_cron_time", 0);
  if (($now - $lastcron) < 24 * 60 * 60)
    return;
  variable_set("nycc_last_ride_overlaps_cron_time", $now);
  watchdog("rides", "checking for ride overlaps", array(), WATCHDOG_INFO);

  $sql =<<<EOS
SELECT T1.uid, T1.nid AS ride1, T1.title AS title1, T1.time AS time1, T1.date AS date1, T1.joined AS joined1,
T2.nid AS ride2, T2.title AS title2, T2.time AS time2, T2.date AS date2, T2.joined AS joined2, TIMESTAMPDIFF(MINUTE, T1.time, T2.time) AS diff
FROM viewRideSignups T1, viewRideSignups T2
WHERE T1.uid = T2.uid AND T1.date = T2.date AND ((T1.time <= T2.time AND T1.nid < T2.nid) OR (T1.time < T2.time))
AND TIMESTAMPDIFF(MINUTE, T1.time, T2.time) < 4 * 60
AND (T1.joined = 1 OR T2.joined = 1)
AND (T1.uid, T1.date) IN
  (SELECT uid, date FROM viewRideSignups
   GROUP BY uid, date
   HAVING count(*) > 1
  )
ORDER BY T1.uid, T1.date;
EOS;

  $lastuid = 0;
  $lastdate = "";
  $text = "";

  $q = db_query($sql);
  while ($row = db_fetch_object($q)) {
    if ($lastuid != $row->uid) {
      if (drupal_strlen($text)) {

        $acct = user_load($lastuid);
        if ($acct) {
          $cp = content_profile_load('profile', $acct->uid);
          if ($cp) {
              $cp->field_profile_extra[0]['value'] = $text ."\n\n";
              $context = array('hook' => 'cron', 'op' => 'send', 'node' => $cp, 'user' => $acct);
              actions_do(3, $acct, $context);     // 3 is the email action for ride overlap reminders
              watchdog("ride overlaps", "email user <a href='/user/". $acct->uid ."'>". $acct->name ."</a>", array(), WATCHDOG_INFO);
          }  // cp
        } // acct
        $text = "";
        $lastdate = "";
      }
    }
    // TODO: use row data to generate line for email, end with newline
    // fields: uid, ride1, time1, date1, joined1, ride2, time2, date2, joined2, diff
    //$line = var_export($row, 1) ."\n";
    if ($row->date1 != $lastdate)
      $text .= substr($row->date1, 0, 10) . "\n\n";
    $line = "Ride <a href='http://nycc.org/node/". $row->ride1 ."'>". $row->title1 ."</a> at ". substr($row->time1, 11, 5) ." (". ($row->joined1 ? "joined" : "waiting") .")\n overlaps with <a href='http://nycc.org/node/". $row->ride2 ."'>". $row->title2 ."</a> at ". substr($row->time2, 11, 5) ." (". ($row->joined2 ? "joined" : "waiting") .")\n\n";
    $text .= $line;
    $lastuid = $row->uid;
    $lastdate = $row->date1;
  }  // while
}  // nycc_ride_overlaps_reminder

function nycc_ride_overlaps_user($acctuid, $ridetimestamp) {
  if (!$ridetimestamp) {
    // todo: fix this
    //watchdog("nycc_ride_overlaps_user", "Invalid ride timestamp param: $ridetimestamp.", array(), WATCHDOG_INFO);
    return 0;
  }
  $sql = "SELECT COUNT(*) AS cnt FROM {viewRideSignups} vrs WHERE joined = 0 AND uid = $acctuid AND TIMESTAMPDIFF(MINUTE, vrs.time, $ridetimestamp) < 4 * 60";
  $q = db_query($sql);
  if ($q) {
    $row = db_fetch_object($q);
    if ($row)
      return $row->cnt;
    else {
      watchdog("nycc_ride_overlaps_user", "Unable to fetch row.", array(), WATCHDOG_ERROR);
    }
  } else {
    watchdog("nycc_ride_overlaps_user", "Unable to execute query: $sql.", array(), WATCHDOG_ERROR);
  }
  return 0;
}


/*function nycc_group_forum_values() {
  $arr = array( -1 => 'Create new group forum');
  $vid = 1;  // forums
  $tf = taxonomy_form($vid, 0, "", 'temp');
  $tc = _taxonomy_term_children(18);  // 18 is group forums

  foreach($tf['#options'] as $opt) {
    if (is_object($opt)) {
      $a = $opt->option;
      if (is_array($a)) {
        foreach($a as $ndx => $value) {
          if (in_array($ndx, $tc))
            $arr[$ndx] = $value;
        }
      }
    }
  }
  return $arr;
}*/

function nycc_og_links_alter(&$links, $group) {
  //dsm($links);
  //dsm(get_defined_vars());
  global $user;

  // Match a customized path to the contact form.
  // if (isset($links['contact_owner'])) {
  //   $links['contact_owner'] = l(t('Contact Owner'), 'contact/user/' . $group->uid);
  // }

  //if (($group->field_group_forum_private[0]['value'] > 0))
    //array_unshift($links, l('Group Leaders Forum', 'forum/'. $group->field_group_forum_private[0]['value'], array('query' => 'gids[]='. $group->nid)) );

  unset($links['manager']);
  unset($links['invite']);

  $captsforum = "";
  // no event or ride posts unless captain
  // need to consider group admins instead of captains
  if (!(in_array("SIG or STS Captain", $user->roles) || !is_array($user->og_groups[$group->nid]) || in_array("administer", $user->roles) || in_array("VP of Rides", $user->roles))) {
    unset($links['create_blog']);
    unset($links['create_event']);
    unset($links['create_rides']);
    unset($links['my_membership']);
  }

  // limit join?
  // limit posts to admins, except for forum
  // rename? post to forum

  // unifomize capitalization
  foreach ($links as $ndx => $link) {
    $link = str_replace("member", "Member", $link);
    $link = str_replace("entry", "Entry", $link);
    $link = str_replace("topic", "Topic", $link);
    $links[$ndx] = $link;
  }

  // need to consider group admins instead of captains
  if (in_array("SIG or STS Captain", $user->roles) /*|| is_array($user->og_groups[$group->nid])*/ || in_array("administer", $user->roles) || in_array("VP of Rides", $user->roles)) {
    $links['manage'] = l(t('Manage Members'), 'og/users/' . $group->nid, array('query' => 'gids[]='. $group->nid));
    $links['broadcast'] = l(t('Broadcast to Group'), 'node/' . $group->nid . '/broadcast', array('query' => 'gids[]='. $group->nid));


    $mail_captains = "";
    $mail_riders = "";
    $sql = og_list_users_sql();
    $result = db_query($sql, $group->nid);
    while ($row = db_fetch_object($result)) {
      if ($row->is_admin) {
        if (drupal_strlen($mail_captains))
          $mail_captains .= ",";
        $mail_captains .= $row->mail;
      } else {
        if (drupal_strlen($mail_riders))
          $mail_riders .= ",";
        $mail_riders .= $row->mail;
      }
    } // while
    $links['email_members'] = l(t('Members\' Emails'), "mailto:" . $mail_riders);
    $links['email_captains'] = l(t('Captains\' Emails'), "mailto:" . $mail_captains);
    $captsforum = l('Group Captains\' Forum', 'group/' . $group->nid . '/cforum', array('query' => 'gids[]='. $group->nid));
  }

  $gids = $_REQUEST['gids'];

  $links['home'] = l(t('Group Home'), 'node/' . $group->nid);
  $links['blog'] = l(t('Group Blog'), 'group/' . $group->nid . '/blog', array('query' => 'gids[]='. $group->nid));
  $links['calendar'] = l(t('Group Calendar'), 'group/' . $group->nid . '/calendar/' . date("Y-m"), array('query' => 'gids[]='. $group->nid));
  /*if ($group->field_group_forum[0]['value'] > 0)
    $links['forum'] = l('Group Forum', 'forum/'. $group->field_group_forum[0]['value'], array('query' => 'gids[]='. $group->nid));
  else
    unset($links['create_forum']);
  */

  if(drupal_strlen($captsforum))
    $links['captsforum'] = $captsforum;

  $links['forum'] = l('Group Forum', 'group/' . $group->nid . '/forum', array('query' => 'gids[]='. $group->nid));
  $links['rides'] = l(t('Group Rides'), 'group/' . $group->nid. '/rides', array('query' => 'gids[]='. $group->nid));

}

function nycc_output_group_links_block() {
  $s = "";
  $gids = $_REQUEST['gids'];
  if (!is_array($gids) && ($gids > 0)) {
    $nid = $gids;
    $gp = node_load(array('nid'=> $nid));
    if ($gp && ($gp->type == 'group'))
      $gids = array($nid => $gp->title);
  } else if (is_array($gids)) {
    $arr = array();
    foreach ($gids as $gid) {
      $gp = node_load(array('nid' => $gid));
      if ($gp && ($gp->type == 'group'))
        $arr[$gid] = $gp->title;
    }
    $gids = $arr;
  }
  if (!is_array($gids)) {
    $nid = (arg(1) > 0 ? arg(1) : arg(2));
    if ($nid > 0) {
      $node = node_load(array('nid' => $nid));
      if ($node) {
        if ($node->type == 'group')
          $gids = array($nid => $node->title);
        else if (is_array($node->og_groups_both))
          $gids = $node->og_groups_both;
      }
    }
  }

  $type = $node ? $node->type : arg(1);
  $type = (arg(0) == 'og_calendar') ? "calendar" : $type;
  $type = (arg(0) == 'calendar') ? "calendar" : $type;
  $type = (arg(0) == 'forum') ? "forum" : $type;
  $type = (arg(0) == 'og') ? "page" : $type;
  $type = (arg(0) == 'node' && arg(2) == 'broadcast') ? "page" : $type;
  $type = (arg(0) == 'group' && arg(2) == 'calendar') ? "calendar" : $type;
  $type = (arg(0) == 'group' && arg(2) == 'rides') ? "rides listing" : $type;
  $type = (arg(0) == 'group' && arg(2) == 'blog') ? "blog" : $type;
  $type = (arg(0) == 'group' && arg(2) == 'forum') ? "forum" : $type;
  $type = ($type == 'gpforumpost') ? "forum post" : $type;
  $type = ($type == 'gpcaptspost') ? "captains' forum post" : $type;

  if ($gids && ($type != 'group') && (arg(1) != 'add') && (arg(2) != 'edit') && (arg(0) != 'comment') && (arg(1) != 'reply')) {
    $s .= "<div>This $type belongs to the following groups:</div>";
    $s .= "<ul class='group-links'>";
    foreach ($gids as $grpid => $grpname) {
      $link = l($grpname, "node/$grpid");
      $s .= "<li>$link</li>";
      if ($node->type == "gpforumpost") {
        $link = l($grpname ." Forum", "group/$grpid/forum");
        $s .= "<li>$link</li>";
      }
      // TODO: check for captain role or group admin
      if ($node->type == "gpcaptspost") {
        $link = l($grpname ." Captains' Forum", "group/$grpid/cforum");
        $s .= "<li>$link</li>";
      }
    }
    $s .= "</ul>";
  }
  return $s;
}

/**
 * Act on group subscription actions.
 *
 * This hook allows modules to react when operations are performed on group
 * subscriptions.
 *
 * @param $op
 *   What kind of action is being performed. Possible values (in
 *   alphabetical order):
 *   - admin new: A new user is added as an admin to a group.
 *   - user approve: A user has been approved for membership to a group.
 *   - user broadcast: Send notifications to group members.
 *   - user delete: A user deletes their subscription to a group.
 *   - user deny: A user is denied membership to a group.
 *   - user insert: New user joins a group.
 *   - user request: A user requests membership to a group.
 *   - user update: A user changes their subscription to a group.
 *
 * @param  $gid
 *   The group Node ID.
 * @param $uid
 *   The User ID affected by the message. For 'user request', array of uids for
 *   group administrators.
 * @param $args
 *   A set of parameters that defines extended arguments. Varies by operation.
 *   user create, user update:
 *   - is_active: 1 to create an active subscription, 0 to create a subscription
 *     request.
 *   - is_admin: 1 to create a group administrator subscription, 0 to create a
 *     typical member subscription.
 *   admin new, user broadcast, user deny, user request:
 *   - subject: Subject/Title of a notification message.
 *   - body: Text of a notification message.
 *   user broadcast:
 *   - from: The user account sending the message.
 */

function nycc_og($op, $gid, $uid, $args) {
  global $user;
  switch ($op) {
    case 'user request':
      //if (count($user->og_groups))
        //drupal_set_message('You are already in a group!', array('!uid' => $uid, '!gid' => $gid));
        //drupal_set_message('User !uid added to group !gid.', array('!uid' => $uid, '!gid' => $gid));
      break;
    // case 'user delete':
    //   drupal_set_message('User !uid removed from group !gid.', array('!uid' => $uid, '!gid' => $gid));
    //   break;
  }
}

function nycc_og_create_links($group) {
  //dsm($group);
  $links = array();

  // // Add a link to contact the group owner.
  // if (module_exists('contact')) {
  //   $links['contact_owner'] = l(t('Contact Owner'), 'user/' . $group->uid . '/contact');
  // }

  // add links to forum, original mission post?


  return $links;
}


function nycc_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'after_update':
      $eny_import_role = 22;
      if (isset($account->roles[$eny_import_role])) {
        $cp = content_profile_load('profile', $account->uid);
        if ($cp) {
          //$cp->field_review_last_date[0]['value'] = "";
          node_save($cp);
        } // cp
        //unset($account->roles[$eny_import_role]);
        //user_save($account);
      } // if eny_import_role
      break;   // case update
  } // switch
  return;
}

/*
function nycc_mail() {

}
*/

function nycc_get_group_user_status($gid, $uid) {
  $sql = "SELECT tid FROM {nycc_group_user_status} WHERE gid = %d AND uid =%d";
  $q = db_query($sql, $gid, $uid);
  $r = db_fetch_object($q);
  return $r ? $r->tid : 0;
}








function nycc_ride_coordinators_email(&$form_state) {
  global $user;
  $form = array();

  $arg1 = arg(1);
  if (drupal_strlen($arg1) == 0)
    $arg1 = "Leaders";

  $arg2 = arg(2);
  if (drupal_strlen($arg2) == 0)
    $arg2 = "All";

  //dsm(get_defined_vars());

  // to do: check for access by admin only?
  if ($user->uid && (in_array("president", $user->roles) || in_array("administer", $user->roles) || in_array("ride coordinator", $user->roles) || in_array("vp of rides", $user->roles))) {
    nycc_turn_off_journal_form('nycc_ride_coordinators_email');

    $cp = content_profile_load('profile', $user->uid);

    $form['description'] = array(
      '#prefix' => '<div>',
      '#value' => t("Use this for to send an e-mail blast to the selected members."),
      '#suffix' => '</div>',
    );

    $form['target'] = array(
      '#type' => 'select',
      '#required' => true,
      '#default_value' => $arg1,
      '#title' => t("Target Group"),
      '#options' => array("Leaders" => "Leaders", "Riders" => "Riders"),
      '#description' => "Send e-mail to ride leaders or riders (over the past 12 months).",
    );

    $form['level'] = array(
      '#type' => 'select',
      '#required' => true,
      '#default_value' => $arg2,
      '#title' => t("Ride Level"),
      '#options' => array("All" => "All", "A" => "A", "B" => "B", "C" => "C"),
      '#description' => "Choose the riding level of the riders you wish to e-mail.",
    );

    $form['from'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("From"),
      '#description' => "Enter your email address. Required.",
      //'#default_value' => $cp->field_first_name[0]['value'] . " " . $cp->field_last_name[0]['value'],
      '#default_value' => $user->mail,
    );

    $form['subject'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("Subject"),
      '#description' => "Enter the subject for the e-mail message. Required.",
    );

    $form['message'] = array(
      '#type' => 'textarea',
      '#required' => true,
      '#title' => t("Body"),
      '#rows' => 6,
      '#description' => "Enter the text of your message here. Required",
    );

    $form['button'] = array(
      '#type' => 'submit',
      '#value' => t('Send'),
    );

  }  else {
    // access denied
    drupal_set_message("You must be an Admistrator, President, Ride Coordinator or VP of Rides to access this page.");
  }

  return $form;

}

function nycc_ride_coordinators_email_validate($form, $form_state) {
  if (!valid_email_address($form_state['values']['from']))
    form_set_error('from', "Please enter a valid e-mail address.");
}

function nycc_ride_coordinators_email_submit($form, $form_state) {

  $arg1 = strtolower($form_state['values']['target']);
  if (drupal_strlen($arg1) == 0)
    $arg1 = "Leaders";
  $arg2 = strtolower($form_state['values']['level']);
  if (drupal_strlen($arg2) == 0)
    $arg2 = "All";
  $subject = $form_state['values']['subject'];
  $body = $form_state['values']['message'];
//  $from = $form_state['values']['from'];  - 11/25/2015 changing to reduce bounced emails whend sender is aol.com or yahoo.com
  $replyTo = $form_state['values']['from'];
  $from = "no-reply@nycc.org";


  // todo: remove
  //drupal_set_message("No emails sent yet. This feature is still under construction. Coming soon!");
  //drupal_set_message("Note that messages will be sent to " . $form_state['values']['level'] . " level $arg1");


  $r2 = time();
  $r1 = $r2 - 365 * 24 * 60 * 60;

  if ($arg1 == 'riders') {
    $sql =<<<EOS

      SELECT DISTINCT mail FROM users u, users_roles ur, node r, content_type_rides ctr, content_field_ride_current_riders cfrcr WHERE u.uid = cfrcr.field_ride_current_riders_uid AND ur.uid = u.uid AND ur.rid = 3 AND ctr.nid = cfrcr.nid AND ctr.vid = cfrcr.vid AND r.type = 'rides' AND cfrcr.nid = r.nid AND cfrcr.vid = r.vid AND

      UNIX_TIMESTAMP(CONCAT(
        DATE_FORMAT(ctr.field_date_ride_first_value, "%Y-%m-%%d"),
        "T",
        If(ctr.field_ride_start_time_select_value = "AM", ctr.field_ride_start_time_hour_value, IF(ctr.field_ride_start_time_hour_value < 12, ctr.field_ride_start_time_hour_value+12, ctr.field_ride_start_time_hour_value-12)),
        ":",
        ctr.field_ride_start_time_min_value,
        ":00"
      ))
      BETWEEN $r1 AND $r2
EOS;

  } else {

    $sql =<<<EOS2

      SELECT DISTINCT mail FROM users u, node p, node r, content_field_ride_leaders cfrl, content_type_rides ctr WHERE u.uid = p.uid  AND cfrl.field_ride_leaders_nid = p.nid AND p.type = 'profile' AND r.type = 'rides' AND ctr.nid = r.nid AND ctr.vid = r.vid AND r.nid = cfrl.nid AND r.vid = cfrl.vid AND  ctr.field_ride_status_value = 'Approved' AND

      UNIX_TIMESTAMP(CONCAT(
        DATE_FORMAT(ctr.field_date_ride_first_value, "%Y-%m-%%d"),
        "T",
        If(ctr.field_ride_start_time_select_value = "AM", ctr.field_ride_start_time_hour_value, IF(ctr.field_ride_start_time_hour_value < 12, ctr.field_ride_start_time_hour_value+12, ctr.field_ride_start_time_hour_value-12)),
        ":",
        ctr.field_ride_start_time_min_value,
        ":00"
      ))
      BETWEEN $r1 AND $r2
EOS2;

  }

  // add filter
  if ($arg2 != "all")
    $sql .= " AND ctr.field_ride_select_level_value = '$arg2' ";
  else
    $sql .= " AND ctr.field_ride_select_level_value IN ('a', 'b', 'c') ";

  //dpm(array('sql' => $sql));
  // for testing and logging
  $emails = array();

  $q = db_query($sql);
  $cnt = 0;
  while ($row = db_fetch_object($q)) {
    $emails[] = t($row->mail);
    $message = array(
      'to' => t($row->mail),
      'subject' => t($subject),
      'body' => $body,
      'headers' => array('From' => t($from), 'Reply-To' => t($replyTo)),
    );
    //dpm($message);
    drupal_mail_send($message);
    $cnt++;
  }
  drupal_set_message("$cnt emails sent.");
  watchdog('nycc', "%cnt emails sent with subject '%subject' from '%from' with body '%body' to: %emails", array('%cnt' => $cnt, '%subject' => t($subject), '%from' => t($from), '%body' => t($body), '%emails' => implode(', ', $emails)), WATCHDOG_INFO);
  //dpm($emails);

}

function nycc_output_ride_coordinators_email_block() {
  $output = "";
  $output .= "<p>Send an email blast to ride leaders and club members based on riding level.</p>";
  $output .= "<ul>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Leaders/All' class='nycc-button-wrapper'>A/B/C-Level Leaders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Leaders/A' class='nycc-button-wrapper'>A-Level Leaders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Leaders/B' class='nycc-button-wrapper'>B-Level Leaders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Leaders/C' class='nycc-button-wrapper'>C-Level Leaders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Riders/All' class='nycc-button-wrapper'>A/B/C-Level Riders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Riders/A' class='nycc-button-wrapper'>A-Level Riders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Riders/B' class='nycc-button-wrapper'>B-Level Riders</a></li>";
  $output .= "<li><a href='/nycc-ride-coordinators-email/Riders/C' class='nycc-button-wrapper'>C-Level Riders</a></li>";
  $output .= "</ul>";
  return $output;
}

function nycc_record_badge_award($uid, $bid) {
  $sql = "REPLACE INTO {nycc_user_badge_award} (uid, bid, awarded) VALUES (%d, %d, %d)";
  $q = db_query($sql, $uid, $bid, time());
}

function nycc_approve_ride($ride = NULL) {
  if (!$ride)
    $ride = arg(1);
  if (is_numeric($ride))
    $ride = node_load(array('nid' => $ride));
  if (is_object($ride) && nycc_can_approve()) {
    $ride->field_ride_status[0]['value'] = "Approved";
    $ride->field_ride_additional_dates[0]['value'] = "";
    node_save($ride);
    drupal_set_message('Ride Approved.');
    drupal_goto("node/" . $ride->nid);
  } else {
    drupal_set_message('You are not authorized to approve this ride.');
  }
}

// why is this function called twice after submitting?
// once with post data, once without
function nycc_import_user_events(&$form_state) {
  global $user;
  $form = array();

  //dsm($form_state);

  // to do: check for access by admin only?
  if ($user->uid && (in_array("administer", $user->roles) || user_access('administer users'))) {
    nycc_turn_off_journal_form('nycc_import_user_events');

    //$cp = content_profile_load('profile', $user->uid);

    $form['description'] = array(
      '#prefix' => '<div>',
      '#value' => t("Use this form to import data used to award badges to members and to record event graduations."),
      '#suffix' => '</div>',
    );

    // select for event to use
    $events = array(0 => " -- please select an event -- ");
    $sql = "SELECT nid, title FROM {node} WHERE type = \"event\" AND status <> 0 ORDER BY title";
    $q = db_query($sql);
    while($row = db_fetch_array($q)) {
      $events[$row['nid']] = $row['title'];
    }
    $form['eventid'] = array(
      '#type' => 'select',
      '#title' => t("Event"),
      '#options' => $events,
      '#description' => "Choose the published event to associate with the imported rows. Create an event <a href='/node/add/event' target='_blank'>here</a>.",
    );

    // select for the badge?
    $badges[0] = " -- please select a badge -- ";
    $badges += user_badges_get_badges("select");    // all badges as (bid => name)
    // todo: sort array
    $form['badgeid'] = array(
      '#type' => 'select',
      '#title' => t("Badge"),
      '#options' => $badges,
      '#description' => "Choose the badge associated with graduates.  If no badge is selected, none will be assigned. Create a badge <a href='/admin/user/user_badges/add' target='_blank'>here</a>.",
    );

    $form['mailcol'] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#title' => t("E-mail Column"),
      '#size' => 10,
      '#default_value' => 3,
      '#description' => "Column number for e-mail address. Required.",
    );

    $form['namecol'] = array(
      '#type' => 'textfield',
      '#title' => t("Username Column"),
      '#size' => 5,
      '#default_value' => 7,
      '#description' => "Column number for user name (may be blank if valid e-mail). Leave blank or zero if not present in data.",
    );

    $form['gradcol'] = array(
      '#type' => 'textfield',
      '#title' => t("Graduation Column"),
      '#size' => 5,
      '#default_value' => 4,
      '#description' => "Column number for graduation status (yes/no, blank is no). Note that badges will only be assigned to graduates if this column is present in data. Leave blank or zero if not present in data.",
    );

    $form['reasoncol'] = array(
      '#type' => 'textfield',
      '#title' => t("Reason Column"),
      '#size' => 5,
      '#default_value' => 0,
      '#description' => "Column number for 'reason' text. Leave blank or zero if not present in data.",
    );

    $form['csv'] = array(
      '#type' => 'textarea',
      '#required' => true,
      '#title' => t("CSV"),
      '#rows' => 5,
      '#default_value' => $form_state['post']['csv'],
      '#description' => "Paste comma separated values, one row per event and user. Required.",
    );

    $form['button'] = array(
      '#type' => 'submit',
      '#value' => t('Import'),
    );

  }  else {
    // access denied
    drupal_set_message("You must be an administrator to access this page.");
  }

  return $form;
}

function nycc_import_user_events_validate($form, $form_state) {

  //dsm($form_state);

  /*
  if (!($form_state['values']['eventid']) > 0)
    form_set_error('eventid', "Please select an event.");

  if (!($form_state['values']['badgeid']) > 0)
    form_set_error('badgeid', "Please select a badge.");

  if (!($form_state['values']['namecol']) > 0)
    form_set_error('namecol', "Please set the name column.");

  if (!($form_state['values']['gradcol']) > 0)
    form_set_error('gradcol', "Please set the graduation column.");
  */

  if (!($form_state['values']['mailcol']) > 0)
    form_set_error('mailcol', "Please set the e-mail column.");

  $csvrows = preg_split("/\n/", $form_state['values']['csv'] . "\n");
  if (!(is_array($csvrows) && count($csvrows)))
    form_set_error('csv', "Please enter valid csv data.");

}

function nycc_import_user_events_submit($form, $form_state) {
  global $user;

  $csv = $form_state['values']['csv'] . "\n";
  $mailcol = $form_state['values']['mailcol'];
  $namecol = $form_state['values']['namecol'];
  $gradcol = $form_state['values']['gradcol'];
  $reasoncol = $form_state['values']['reasoncol'];
  $eventid = trim($form_state['values']['eventid']);
  $badgeid = trim($form_state['values']['badgeid']);
  $csvrows = preg_split("/\n/", $csv);

  foreach ($csvrows as $ndx => &$row) {
    $row = str_getcsv(trim($row));
  }

  $numrows = 0;
  $numerrors = 0;
  $numbadges = 0;

  $badges = user_badges_get_badges("all");    // all badges

  foreach ($csvrows as $ndx => $row) {
    if ($row) {  // ignore blank lines
      set_time_limit(30);

      // todo: make sure column indexs are valid and in bounds
      $mail = trim($row[$mailcol-1]);
      $name = "";
      if ($namecol > 0)
        $name = trim($row[$namecol-1]);
      $grad = "";
      if ($gradcol > 0)
        $grad = strtolower(trim($row[$gradcol-1]));
      $reason = "";
      if ($reasoncol > 0)
        $reason = strtolower(trim($row[$reasoncol-1]));

      // skip first row if no @ in it's email field
      if (($ndx == 0) && (strpos($mail,'@') === FALSE)) {
        drupal_set_message("Note: first line of csv data headers skipped.");
        continue;
      }

      $numrows++;
      // check for user based on email or username fields, indicate error and $ndx row number
      // user name may be blank
      $acct = user_load(array('mail' => $mail));
      if (!$acct && drupal_strlen($name)) {
        $acct = user_load(array('name' => $name));
        if (!$acct) {
          $numerrors++;
          drupal_set_message("$ndx: Unable to load user with email $mail or username $name");
          continue ;
        }
      }

      // record event graduation data
      $sql = "REPLACE INTO {nycc_user_events} (uid, nid, graduated, reason) VALUES (%d, %d, '%s', '%s')";
      $q = db_query($sql, $acct->uid, $eventid, $grad, $reason);

      // check for graduation, record data but do not award badge
      if (($gradcol > 0) && ($grad != "yes")) {
        continue;
      }


      if ($badgeid > 0) {
        // note: user_badges_user_save removes any badges not included in array
        // get all badges awarded acct so can see if already awarded
        $ubadges = user_badges_get_badges($acct->uid);
        $ubadges[$badgeid] = user_badges_get_badge($badgeid);
        user_badges_user_save($ubadges, $acct->uid);
        $numbadges++;
      }  // if valid badgeid
    } // if $row
  }  // for

  // output errors via drupal_set_message
  // output row count, successes and errors
  $ne = $numerrors == 1 ? "error" : "errors";
  $nr = $numrows == 1 ? "row" : "rows";
  $nb = $numbadges == 1 ? "badge" : "badges";
  drupal_set_message("$numrows $nr processed, $numerrors $ne, $numbadges $nb awarded.");
}

// Note: str_getcsv requies php 5.3 or the function below
if (!function_exists('str_getcsv')) {
  function str_getcsv($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
    $fiveMBs = 5 * 1024 * 1024;
    $fp = fopen("php://temp/maxmemory:$fiveMBs", 'r+');
    fputs($fp, $input);
    rewind($fp);
    $data = fgetcsv($fp, 1000, $delimiter, $enclosure); //  $escape only got added in 5.3.0
    fclose($fp);
    return $data;
  }
}


?>
